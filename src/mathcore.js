(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MathCore"] = factory();
	else
		root["MathCore"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/mathcore.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/decimal.js/decimal.js":
/*!********************************************!*\
  !*** ./node_modules/decimal.js/decimal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.2.0\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { name: '[object Decimal]' };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '1e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n  // Add aliases to match BigDecimal method names.\r\n  // P.add = P.plus;\r\n  P.subtract = P.minus;\r\n  P.multiply = P.times;\r\n  P.divide = P.div;\r\n  P.remainder = P.mod;\r\n  P.compareTo = P.cmp;\r\n  P.negate = P.neg;\r\n   */\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, y,\r\n      len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (v instanceof Decimal) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\r\n      return Decimal;\r\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else {}\r\n})(this);\r\n\n\n//# sourceURL=webpack://MathCore/./node_modules/decimal.js/decimal.js?");

/***/ }),

/***/ "./src/assert.js":
/*!***********************!*\
  !*** ./src/assert.js ***!
  \***********************/
/*! exports provided: assert, message, reserveCodeRange, setLocation, clearLocation, setCounter, checkCounter, Assert */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assert\", function() { return assert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"message\", function() { return message; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reserveCodeRange\", function() { return reserveCodeRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setLocation\", function() { return setLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearLocation\", function() { return clearLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setCounter\", function() { return setCounter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkCounter\", function() { return checkCounter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Assert\", function() { return Assert; });\n/* harmony import */ var _backward_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backward.js */ \"./src/backward.js\");\n/*\n * Copyright 2013 Art Compiler LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n  ASSERTS AND MESSAGES\n\n  We use the 'assert()' function to trap invalid states of all kinds. External\n  messages are distinguished from internal messages by a numeric prefix that\n  indicates the error code associated with the message. For example, the\n  following two asserts implement an internal and external assert, respectively.\n\n     assert(false, \"This code is broken.\");\n     assert(false, \"1001: Invalid user input.\");\n\n  To aid in the writing of external messages, we keep them in a single global\n  table named 'Assert.messages'. Each module adds to this table its own messages\n  with an expression such as\n\n     messages[1001] = \"Invalid user input.\";\n\n  These messages are accessed with the 'message' function as such\n\n     message(1001);\n\n  Calling 'assert' with 'message' looks like\n\n     assert(x != y, message(1001));\n\n  ALLOCATING ERROR CODES\n\n  In order to avoid error code conflicts, each module claims a range of values\n  that is not already taken by the modules in the same system. A module claims\n  a range of codes by calling the function reserveCodeRange() like this:\n\n     reserveCodeRange(1000, 1999, \"mymodule\");\n\n  If the requested code range has any values that are already reserved, then\n  an assertion is raised.\n\n  USAGE\n\n  In general, only allocate message codes for external asserts. For internal\n  asserts, it is sufficient to simply inline the message text in the assert\n  expression.\n\n  It is good to write an assert for every undefined state, regardless of whether\n  it is the result of external input or not. Asserts can then be externalized if\n  and when they it is clear that they are the result of external input.\n\n  A client module can override the messages provided by the libraries it uses by\n  simply redefining those messages after the defining library is loaded. That is,\n  the client can copy and past the statements of the form\n\n     messages[1001] = \"Invalid user input.\";\n\n  and provide new text for the message.\n\n     messages[1001] = \"Syntax error.\";\n\n  In the same way different sets of messages can be overridden for the purpose\n  of localization.\n\n*/\n\n\nlet ASSERT = true;\nlet assert = (function () {\n  return !ASSERT ?\n    function () { } :\n    function (val, str, location) {\n      if (str === void 0) {\n        str = \"failed!\";\n      }\n      if (!val) {\n        let err = new Error(str);\n        err.location = location ? location : Assert.location;\n        throw err;\n      }\n    }\n})();\n\nlet message = function (errorCode, args) {\n  let str = Assert.messages[errorCode];\n  let location = Assert.location;\n  if (args) {\n    Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(args, function (arg, i) {\n      str = str.replace(\"%\" + (i + 1), arg);\n    });\n  }\n  return errorCode + \": \" + str;\n};\n\nlet reserveCodeRange = function (first, last, moduleName) {\n  assert(first <= last, \"Invalid code range\");\n  let noConflict = Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(Assert.reservedCodes, function (range) {\n    return last < range.first || first > range.last;\n  });\n  assert(noConflict, \"Conflicting request for error code range\");\n  Assert.reservedCodes.push({first: first, last: last, name: moduleName});\n}\n\nlet setLocation = function (location) {\n  //assert(location, \"Empty location\");\n  Assert.location = location;\n}\n\nlet clearLocation = function () {\n  Assert.location = null;\n}\n\nlet setCounter = function (count, message) {\n  Assert.count = count;\n  Assert.countMessage = message ? message : \"ERROR count exceeded\";\n}\n\nlet checkCounter = function () {\n  let count = Assert.count;\n  if (typeof count !== \"number\" || isNaN(count)) {\n    assert(false, \"ERROR counter not set\");\n    return;\n  }\n  assert(Assert.count--, Assert.countMessage);\n}\n\nlet Assert = {\n  assert: assert,\n  message: message,\n  messages: {},\n  reserveCodeRange: reserveCodeRange,\n  reservedCodes: [],\n  setLocation: setLocation,\n  clearLocation: clearLocation,\n  setCounter: setCounter,\n  checkCounter: checkCounter,\n};\n\n\n//# sourceURL=webpack://MathCore/./src/assert.js?");

/***/ }),

/***/ "./src/ast.js":
/*!********************!*\
  !*** ./src/ast.js ***!
  \********************/
/*! exports provided: Ast */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ast\", function() { return Ast; });\n/* harmony import */ var _backward_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backward.js */ \"./src/backward.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert.js */ \"./src/assert.js\");\n/*\n * Copyright 2013 Art Compiler LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n  This module implements the node factory for abstract syntax trees (AST).\n\n  Each node inherits an Ast instance as it prototype.\n\n  All Ast instances share the same node pool and therefore intern trees of\n  identical structure to the same node id.\n\n  Construct new nodes using the following forms:\n    ast.create(\"+\").arg(10).arg(20);\n    ast.create(\"+\", [10, 20]);\n    ast.create({op: \"+\", args: [10, 20]});\n\n  Node manipulation functions are chainable.\n\n */\n\n\n\n\nlet Ast = (function () {\n  // Pool of nodes. Shared between all Ast instances.\n\n  function Ast() {\n    this.nodePool = [\"unused\"];\n    this.nodeMap = {};\n  }\n\n  // Create a node for operation 'op'\n  Ast.prototype.create = function create(op, args) {\n    // Create a node that inherits from Ast\n    let node = create(this);\n    if (typeof op === \"string\") {\n      node.op = op;\n      if (args instanceof Array) {\n        node.args = args;\n      } else {\n        node.args = [];\n      }\n    } else if (op !== null && typeof op === \"object\") {\n      let obj = op;\n      Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(keys(obj), function (v, i) {\n        node[v] = obj[v];\n      });\n    }\n    return node;\n  }\n\n  // Append node to this node's args.\n  Ast.prototype.arg = function arg(node) {\n    if (!isNode(this)) {\n      throw \"Malformed node\";\n    }\n    this.args.push(node);\n    return this;\n  }\n\n  // Get or set the Nth arg of this node.\n  Ast.prototype.argN = function argN(i, node) {\n    if (!isNode(this)) {\n      throw \"Malformed node\";\n    }\n    if (node === undefined) {\n      return this.args[i];\n    }\n    this.args[i] = node;\n    return this;\n  }\n\n  // Get or set the args of this node.\n  Ast.prototype.args = function args(a) {\n    if (!isNode(this)) {\n      throw \"Malformed node\";\n    }\n    if (a === undefined) {\n      return this.args;\n    }\n    this.args = a;\n    return this;\n  }\n\n  // Check if obj is a value node object [private]\n  Ast.prototype.isNode = isNode;\n\n  function isNode(obj) {\n    if (obj === undefined) {\n      obj = this;\n    }\n    return obj.op && obj.args;\n  }\n\n  // Intern an AST into the node pool and return its node id.\n  Ast.prototype.intern = function intern(node) {\n    if (this instanceof Ast &&\n        node === undefined &&\n        isNode(this)) {\n      // We have an Ast that look like a node\n      node = this;\n    }\n    Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(typeof node === \"object\", \"node not an object\");\n    let op = node.op;\n    let count = node.args.length;\n    let args = \"\";\n    let args_nids = [ ];\n    for (let i=0; i < count; i++) {\n      args += \" \";\n      if (typeof node.args[i] === \"string\") {\n        args += args_nids[i] = node.args[i];\n      } else {\n        args += args_nids[i] = this.intern(node.args[i]);\n      }\n    }\n    if (node.lbrk && node.lbrk !== \"{\".charCodeAt(0)) {\n      // Make brackets part of the key.\n      args += String.fromCharCode(node.lbrk);\n      args += String.fromCharCode(node.rbrk);\n    }\n    let key = op + count + args;\n    let nid = this.nodeMap[key];\n    if (nid === void 0) {\n      this.nodePool.push({\n        op: op,\n        args: args_nids,\n      });\n      nid = this.nodePool.length - 1 ;\n      this.nodeMap[key] = nid;\n    }\n    return nid;\n  };\n\n  // Get a node from the node pool.\n  Ast.prototype.node = function node(nid) {\n    let n = JSON.parse(JSON.stringify(this.nodePool[nid]));\n    for (let i=0; i < n.args.length; i++) {\n      // If string, then not a nid.\n      if (typeof n.args[i] !== \"string\") {\n        n.args[i] = this.node(n.args[i]);\n      }\n    }\n    return n;\n  };\n\n  // Dump the contents of the node pool.\n  Ast.prototype.dumpAll = function dumpAll() {\n    let s = \"\";\n    let ast = this;\n    Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(this.nodePool, function (n, i) {\n      s += \"\\n\" + i + \": \" + Ast.dump(n);\n    });\n    return s;\n  };\n\n  // Dump the contents of a node.\n  Ast.dump = Ast.prototype.dump = function dump(n) {\n    if (typeof n === \"string\") {\n      let s = \"\\\"\"+n+\"\\\"\";\n    } else if (typeof n === \"number\") {\n      let s = n;\n    } else {\n      let s = \"{ op: \\\"\" + n.op + \"\\\", args: [ \";\n      for (let i=0; i < n.args.length; i++) {\n        if (i > 0) {\n          s += \" , \";\n        }\n        s += dump(n.args[i]);\n      }\n      s += \" ] }\";\n    }\n    return s;\n  };\n\n  // Self tests\n  let RUN_SELF_TESTS = false;\n  function test() {\n    (function () {\n    })();\n  }\n  if (RUN_SELF_TESTS) {\n    test();\n  }\n\n  return Ast;\n})();\n\n\n\n//# sourceURL=webpack://MathCore/./src/ast.js?");

/***/ }),

/***/ "./src/backward.js":
/*!*************************!*\
  !*** ./src/backward.js ***!
  \*************************/
/*! exports provided: forEach, filter, every, some, indexOf, keys, toObject, create */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filter\", function() { return filter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"every\", function() { return every; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"some\", function() { return some; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"indexOf\", function() { return indexOf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keys\", function() { return keys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toObject\", function() { return toObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/*\n * Copyright 2013 Art Compiler LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n  Backward.js defines lexically scoped functions to support backward\n  compatibility with IE8.\n\n  Derived from https://github.com/kriskowal/es5-shim\n*/\n\n// ES5 15.4.4.18\n// http://es5.github.com/#x15.4.4.18\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach\n\n// Check failure of by-index access of string characters (IE < 9)\n// and failure of `0 in boxedString` (Rhino)\nvar boxedString = Object(\"a\"),\n    splitString = boxedString[0] != \"a\" || !(0 in boxedString);\n\nvar forEach = function forEach(array, fun) {  \n  var thisp = arguments[2];\n  if (Array.prototype.indexOf) {\n\t  return array.forEach(fun);\n  }\n  var object = toObject(array),\n      self = splitString && _toString(object) == \"[object String]\" ? object.split(\"\") : object,\n      i = -1,\n      length = self.length >>> 0;\n\n  // If no callback function or if callback is not a callable function\n  if (_toString(fun) != \"[object Function]\") {\n    throw new TypeError(); // TODO message\n  }\n    \n  while (++i < length) {\n    if (i in self) {\n      // Invoke the callback function with call, passing arguments:\n      // context, property value, property key, thisArg object\n      // context\n      fun.call(thisp, self[i], i, object);\n    }\n  }\n};\n\n\n// ES5 15.4.4.20\n// http://es5.github.com/#x15.4.4.20\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\nvar filter = function filter(array, fun /*, thisp */) {\n  var thisp = arguments[2];\n  if (Array.prototype.filter) {\n\t  return array.filter(fun);\n  }\n  var object = toObject(array),\n      self = splitString && _toString(array) == \"[object String]\" ? array.split(\"\") : object,\n      length = self.length >>> 0,\n      result = [],\n      value;\n\n  // If no callback function or if callback is not a callable function\n  if (_toString(fun) != \"[object Function]\") {\n    throw new TypeError(fun + \" is not a function\");\n  }\n  \n  for (var i = 0; i < length; i++) {\n    if (i in self) {\n      value = self[i];\n      if (fun.call(thisp, value, i, object)) {\n        result.push(value);\n      }\n    }\n  }\n  return result;\n};\n\n// ES5 15.4.4.16\n// http://es5.github.com/#x15.4.4.16\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every\nvar every = function every(array, fun /*, thisp */) {\n  var thisp = arguments[2];\n  if (Array.prototype.every) {\n\t  return array.every(fun, thisp);\n  }\n  var object = toObject(array),\n      self = splitString && _toString(array) == \"[object String]\" ? array.split(\"\") : object,\n      length = self.length >>> 0;\n\n  // If no callback function or if callback is not a callable function\n  if (_toString(fun) != \"[object Function]\") {\n    throw new TypeError(fun + \" is not a function\");\n  }\n  \n  for (var i = 0; i < length; i++) {\n    if (i in self && !fun.call(thisp, self[i], i, object)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// ES5 15.4.4.17\n// http://es5.github.com/#x15.4.4.17\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some\nvar some = function some(array, fun /*, thisp */) {\n  var thisp = arguments[2];\n  if (Array.prototype.some) {\n\t  return array.some(fun, thisp);\n  }\n  var object = toObject(array),\n      self = splitString && _toString(array) == \"[object String]\" ? array.split(\"\") : object,\n      length = self.length >>> 0;\n\n  // If no callback function or if callback is not a callable function\n  if (_toString(fun) != \"[object Function]\") {\n    throw new TypeError(fun + \" is not a function\");\n  }\n\n  for (var i = 0; i < length; i++) {\n    if (i in self && fun.call(thisp, self[i], i, object)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// ES5 15.4.4.14\n// http://es5.github.com/#x15.4.4.14\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\nvar indexOf = function indexOf(array, sought /*, fromIndex */ ) {\n  var fromIndex = arguments[2];\n  if (Array.prototype.indexOf || typeof array === \"string\") {\n\t  return array.indexOf(sought, fromIndex);\n  }\n  var self = splitString && _toString(array) == \"[object String]\" ? array.split(\"\") : toObject(array),\n      length = self.length >>> 0;\n\n  if (!length) {\n    return -1;\n  }\n\n  var i = 0;\n  if (arguments.length > 2) {\n    i = toInteger(fromIndex);\n  }\n  \n  // handle negative indices\n  i = i >= 0 ? i : Math.max(0, length + i);\n  for (; i < length; i++) {\n    if (i in self && self[i] === sought) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n// ES5 15.2.3.14\n// http://es5.github.com/#x15.2.3.14\nvar keys = function keys(object) {\n  if (Object.keys) {\n\t  return Object.keys(object);\n  }\n  // http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation\n  var hasDontEnumBug = true,\n  dontEnums = [\n    \"toString\",\n    \"toLocaleString\",\n    \"valueOf\",\n    \"hasOwnProperty\",\n    \"isPrototypeOf\",\n    \"propertyIsEnumerable\",\n    \"constructor\"\n  ],\n  dontEnumsLength = dontEnums.length;\n  \n  for (var key in {\"toString\": null}) {\n    hasDontEnumBug = false;\n  }\n\n  if ((typeof object != \"object\" && typeof object != \"function\") ||\n      object === null) {\n    throw new TypeError(\"Object.keys called on a non-object\");\n  }\n  \n  var keys = [];\n  for (var name in object) {\n    if (owns(object, name)) {\n      keys.push(name);\n    }\n  }\n  \n  if (hasDontEnumBug) {\n    for (var i = 0, ii = dontEnumsLength; i < ii; i++) {\n      var dontEnum = dontEnums[i];\n      if (owns(object, dontEnum)) {\n        keys.push(dontEnum);\n      }\n    }\n  }\n  return keys;\n};\n\n// ES5 9.9\n// http://es5.github.com/#x9.9\nvar toObject = function (o) {\n  if (o == null) { // this matches both null and undefined\n    throw new TypeError(\"can't convert \"+o+\" to object\");\n  }\n  return Object(o);\n};\n\n//var call = Function.prototype.call;\n//var prototypeOfArray = Array.prototype;\nvar prototypeOfObject = Object.prototype;\n//var _Array_slice_ = prototypeOfArray.slice;\n// Having a toString local variable name breaks in Opera so use _toString.\nvar _toString = function (val) { return prototypeOfObject.toString.apply(val); }; //call.bind(prototypeOfObject.toString);\nvar owns = function (object, name) { return prototypeOfObject.hasOwnProperty.call(object, name); }; //call.bind(prototypeOfObject.hasOwnProperty);\n\nvar create = function create(o) {\n  if(Object.create) {\n    return Object.create(o)\n  }\n  var F = function () {};\n  if (arguments.length != 1) {\n    throw new Error('Object.create implementation only accepts one parameter.');\n  }\n  F.prototype = o;\n  return new F();\n};\n\n// From: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\nif (typeof window !== \"undefined\" && !window.JSON) {\n  window.JSON = {\n    parse: function(sJSON) { return eval('(' + sJSON + ')'); },\n    stringify: (function () {\n      var toString = Object.prototype.toString;\n      var isArray = Array.isArray || function (a) { return toString.call(a) === '[object Array]'; };\n      var escMap = {'\"': '\\\\\"', '\\\\': '\\\\\\\\', '\\b': '\\\\b', '\\f': '\\\\f', '\\n': '\\\\n', '\\r': '\\\\r', '\\t': '\\\\t'};\n      var escFunc = function (m) { return escMap[m] || '\\\\u' + (m.charCodeAt(0) + 0x10000).toString(16).substr(1); };\n      var escRE = /[\\\\\"\\u0000-\\u001F\\u2028\\u2029]/g;\n      return function stringify(value) {\n        if (value == null) {\n          return 'null';\n        } else if (typeof value === 'number') {\n          return isFinite(value) ? value.toString() : 'null';\n        } else if (typeof value === 'boolean') {\n          return value.toString();\n        } else if (typeof value === 'object') {\n          if (typeof value.toJSON === 'function') {\n            return stringify(value.toJSON());\n          } else if (isArray(value)) {\n            var res = '[';\n            for (var i = 0; i < value.length; i++)\n              res += (i ? ', ' : '') + stringify(value[i]);\n            return res + ']';\n          } else if (toString.call(value) === '[object Object]') {\n            var tmp = [];\n            for (var k in value) {\n              if (value.hasOwnProperty(k))\n                tmp.push(stringify(k) + ': ' + stringify(value[k]));\n            }\n            return '{' + tmp.join(', ') + '}';\n          }\n        }\n        return '\"' + value.toString().replace(escRE, escFunc) + '\"';\n      };\n    })()\n  };\n}\n\n\n\n//# sourceURL=webpack://MathCore/./src/backward.js?");

/***/ }),

/***/ "./src/mathcore.js":
/*!*************************!*\
  !*** ./src/mathcore.js ***!
  \*************************/
/*! exports provided: MathCore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MathCore\", function() { return MathCore; });\n/* harmony import */ var _backward_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backward.js */ \"./src/backward.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert.js */ \"./src/assert.js\");\n/* harmony import */ var _ast_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ast.js */ \"./src/ast.js\");\n/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model.js */ \"./src/model.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! decimal.js */ \"./node_modules/decimal.js/decimal.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(decimal_js__WEBPACK_IMPORTED_MODULE_4__);\n/*\n * Copyright 2013 Learnosity Ltd. All Rights Reserved.\n *\n */\n\n\n\n\n\n\n\nlet MathCore = (function MathCore () {\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].reserveCodeRange(3000, 3999, \"mathcore\");\n  var messages = _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages;\n  var message = _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].message;\n  var assert = _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].assert;\n  messages[3001] = \"No Math Core spec provided.\";\n  messages[3002] = \"No Math Core solution provided.\";\n  messages[3003] = \"No Math Core spec value provided.\";\n  messages[3004] = \"Invalid Math Core spec method '%1'.\";\n  messages[3005] = \"Operation taking more than %1 milliseconds.\";\n  messages[3006] = \"Invalid option name '%1'.\";\n  messages[3007] = \"Invalid option value '%2' for option '%1'.\";\n  messages[3008] = \"Internal error: %1\";\n\n  var u = 1;\n  var k = 1000;\n  var c = new decimal_js__WEBPACK_IMPORTED_MODULE_4__[\"Decimal\"](\"1E-2\");\n  var m = new decimal_js__WEBPACK_IMPORTED_MODULE_4__[\"Decimal\"](\"1E-3\");\n  var mu = new decimal_js__WEBPACK_IMPORTED_MODULE_4__[\"Decimal\"](\"1E-6\");\n  var n = new decimal_js__WEBPACK_IMPORTED_MODULE_4__[\"Decimal\"](\"1E-9\");\n  var env = {\n    \"g\": { type: \"unit\", value: u, base: \"g\" },\n    \"s\": { type: \"unit\", value: u, base: \"s\" },\n    \"m\": { type: \"unit\", value: u, base: \"m\" },\n    \"L\": { type: \"unit\", value: u, base: \"L\" },\n    \"kg\": { type: \"unit\", value: k, base: \"g\" },\n    \"km\": { type: \"unit\", value: k, base: \"m\" },\n    \"ks\": { type: \"unit\", value: k, base: \"s\" },\n    \"kL\": { type: \"unit\", value: k, base: \"L\" },\n    \"cg\": { type: \"unit\", value: c, base: \"g\" },\n    \"cm\": { type: \"unit\", value: c, base: \"m\" },\n    \"cs\": { type: \"unit\", value: c, base: \"s\" },\n    \"cL\": { type: \"unit\", value: c, base: \"L\" },\n    \"mg\": { type: \"unit\", value: m, base: \"g\" },\n    \"mm\": { type: \"unit\", value: m, base: \"m\" },\n    \"ms\": { type: \"unit\", value: m, base: \"s\" },\n    \"mL\": { type: \"unit\", value: m, base: \"L\" },\n    \"\\\\mug\": { type: \"unit\", value: mu, base: \"g\" },\n    \"\\\\mus\": { type: \"unit\", value: mu, base: \"s\" },\n    \"\\\\mum\": { type: \"unit\", value: mu, base: \"m\" },\n    \"\\\\muL\": { type: \"unit\", value: mu, base: \"L\" },\n    \"ng\": { type: \"unit\", value: n, base: \"g\" },\n    \"nm\": { type: \"unit\", value: n, base: \"m\" },\n    \"ns\": { type: \"unit\", value: n, base: \"s\" },\n    \"nL\": { type: \"unit\", value: n, base: \"L\" },\n    \"in\": { type: \"unit\", value: 1 / 12, base: \"ft\" },\n    \"ft\": { type: \"unit\", value: u, base: \"ft\" },\n    \"yd\": { type: \"unit\", value: 3, base: \"ft\" },\n    \"mi\": { type: \"unit\", value: 5280, base: \"ft\" },\n    \"fl\": { type: \"unit\", value: 1, base: \"fl\" },  // fluid ounce\n    \"cup\": { type: \"unit\", value: 8, base: \"fl\" },\n    \"pt\": { type: \"unit\", value: 16, base: \"fl\" },\n    \"qt\": { type: \"unit\", value: 32, base: \"fl\" },\n    \"gal\": { type: \"unit\", value: 128, base: \"fl\" },\n    \"oz\": { type: \"unit\", value: 1 / 16, base: \"lb\" },\n    \"lb\": { type: \"unit\", value: 1, base: \"lb\" },\n    \"st\": { type: \"unit\", value: 1 / 1614, base: \"lb\" },\n    \"qtr\": { type: \"unit\", value: 28, base: \"lb\" },\n    \"cwt\": { type: \"unit\", value: 112, base: \"lb\" },\n    \"$\": { type: \"unit\", value: u, base: \"$\" },\n    \"min\": { type: \"unit\", value: 60, base: \"s\" },\n    \"hr\": { type: \"unit\", value: 3600, base: \"s\" },\n    \"day\": { type: \"unit\", value: 24*3600, base: \"s\" },\n    \"\\\\radian\": { type: \"unit\", value: u, base: \"\\\\radian\" },\n    \"\\\\degree\": { type: \"unit\", value: Math.PI / 180, base: \"\\\\radian\" },\n    \"\\\\degree K\": { type: \"unit\", value: u, base: \"\\\\degree K\" },\n    \"\\\\degree C\": { type: \"unit\", value: u, base: \"\\\\degree C\" },\n    \"\\\\degree F\": { type: \"unit\", value: u, base: \"\\\\degree F\" },\n    \"R\": { name: \"reals\" },   // Special math symbol for real space.\n    \"matrix\": {},\n    \"pmatrix\": {},\n    \"bmatrix\": {},\n    \"Bmatrix\": {},\n    \"vmatrix\": {},\n    \"Vmatrix\": {},\n    \"array\": {},\n    \"\\\\alpha\": { type: \"var\" },\n    \"\\\\beta\": { type: \"var\" },\n    \"\\\\gamma\": { type: \"var\" },\n    \"\\\\delta\": { type: \"var\" },\n    \"\\\\epsilon\": { type: \"var\" },\n    \"\\\\zeta\": { type: \"var\" },\n    \"\\\\eta\": { type: \"var\" },\n    \"\\\\theta\": { type: \"var\" },\n    \"\\\\iota\": { type: \"var\" },\n    \"\\\\kappa\": { type: \"var\" },\n    \"\\\\lambda\": { type: \"var\" },\n    \"\\\\mu\": { type: \"const\", value: mu },\n    \"\\\\nu\": { type: \"var\" },\n    \"\\\\xi\": { type: \"var\" },\n    \"\\\\pi\": { type: \"const\", value: Math.PI },\n    \"e\": { type: \"const\", value: Math.E },\n    \"\\\\rho\": { type: \"var\" },\n    \"\\\\sigma\": { type: \"var\" },\n    \"\\\\tau\": { type: \"var\" },\n    \"\\\\upsilon\": { type: \"var\" },\n    \"\\\\phi\": { type: \"var\" },\n    \"\\\\chi\": { type: \"var\" },\n    \"\\\\psi\": { type: \"var\" },\n    \"\\\\omega\": { type: \"var\" }\n  };\n  function evaluate(spec, solution, resume) {\n    try {\n      assert(spec, message(3001, [spec]));\n      assert(solution != undefined, message(3002, [solution]));\n      _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].setTimeout(timeoutDuration, message(3005, [timeoutDuration]));\n      var evaluator = makeEvaluator(spec);\n      evaluator.evaluate(solution, function (err, val) {\n        if (err && err.length) {\n          resume(err);\n        } else {\n          resume([], val);\n        }\n      });\n    } catch (e) {\n      console.log(e + \"\\n\" + e.stack);\n      resume(e.stack);\n    }\n  }\n  function evaluateVerbose(spec, solution, resume) {\n    var model, result;\n    try {\n      assert(spec, message(3001, [spec]));\n      _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].setTimeout(timeoutDuration, message(3005, [timeoutDuration]));\n      var evaluator = makeEvaluator(spec);\n      var errorCode = 0, msg = \"Normal completion\", stack, location;\n      evaluator.evaluate(solution, function (err, val) {\n        model = evaluator.model;\n        resume(err, {\n          result: val,\n          errorCode: errorCode,\n          message: msg,\n          stack: stack,\n          location: location,\n          toString: function () {\n            return this.errorCode + \": (\" + location + \") \" + msg + \"\\n\" + this.stack;\n          }\n        });\n      });\n    } catch (e) {\n      if (!e.message) {\n        try {\n          // Internal error.\n          assert(false, message(3008, [e]));\n        } catch (x) {\n          e = x;\n        }\n      }\n      var errorCode = parseErrorCode(e.message);\n      var msg = parseMessage(e.message);\n      var stack = e.stack;\n      var location = e.location;\n      console.log(\"ERROR evaluateVerbose stack=\" + stack);\n      resume([e.message], {\n        errorCode: errorCode,\n        msg: msg,\n      });\n    }\n    function parseErrorCode(e) {\n      var code = +e.slice(0, Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(e, \":\"));\n      if (!isNaN(code)) {\n        return code;\n      }\n      return 0;\n    }\n    function parseMessage(e) {\n      var code = parseErrorCode(e);\n      if (code) {\n        return e.slice(Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(e, \":\")+2);\n      }\n      return e;\n    }\n  }\n\n  var timeoutDuration = 15000; // 30 sec\n\n  function setTimeoutDuration(duration) {\n    timeoutDuration = duration;\n  }\n\n  function validateOption(p, v) {\n    switch (p) {\n    case \"field\":\n      switch (v) {\n      case void 0: // undefined means use default\n      case \"integer\":\n      case \"real\":\n      case \"complex\":\n        break;\n      default:\n        assert(false, message(3007, [p, v]));\n        break;\n      }\n      break;\n    case \"decimalPlaces\":\n      if (v === void 0 || +v >= 0 && +v <= 20) {\n        break;\n      }\n      assert(false, message(3007, [p, v]));\n      break;\n    case \"allowDecimal\":\n    case \"allowInterval\":\n    case \"dontExpandPowers\":\n    case \"dontFactorDenominators\":\n    case \"dontFactorTerms\":\n    case \"doingSimplified\":\n    case \"dontSimplifyImaginary\":\n    case \"ignoreOrder\":\n    case \"inverseResult\":\n    case \"requireThousandsSeparator\":\n    case \"ignoreText\":\n    case \"ignoreTrailingZeros\":\n    case \"allowThousandsSeparator\":\n    case \"compareSides\":\n    case \"ignoreCoefficientOne\":\n    case \"keepTextWhitespace\":\n    case \"strict\":\n    case \"allowEulersNumber\":\n    case \"treatLettersAsVariables\":\n    case \"ignoreUnits\":\n    case \"compareGrouping\":\n    case \"convertRepeatingDecimalToFraction\":\n      if (typeof v === \"undefined\" || typeof v === \"boolean\") {\n        break;\n      }\n      assert(false, message(3007, [p, v]));\n      break;\n    case \"setThousandsSeparator\":\n      if (typeof v === \"undefined\" ||\n          typeof v === \"string\" ||\n          v instanceof Array) {\n        break;\n      }\n      assert(false, message(3007, [p, v]));\n      break;\n    case \"setDecimalSeparator\":\n      if (typeof v === \"undefined\" ||\n          typeof v === \"string\" && v.length === 1 ||\n          v instanceof Array && v.length > 0 && v[0].length === 1) {\n        break;\n      }\n      assert(false, message(3007, [p, JSON.stringify(v)]));\n      break;\n    case \"compatibility\":\n      if (typeof v === \"undefined\" ||\n          typeof v === \"string\" ||\n          v instanceof Array) {\n        break;\n      }\n      assert(false, message(3007, [p, v]));\n      break;\n    case \"env\":\n      if (typeof v === \"undefined\" ||\n          typeof v === \"object\") {\n        break;\n      }\n      assert(false, message(3007, [p, JSON.stringify(v)]));\n      break;\n    default:\n      assert(false, message(3006, [p]));\n      break;\n    }\n    // If we get this far, all is well.\n    return;\n  }\n  function validateOptions(options) {\n    if (options) {\n      Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"keys\"])(options), function (option) {\n        validateOption(option, options[option]);\n      });\n    }\n  }\n  function makeEvaluator(spec) {\n    var method = spec.method;\n    var value = spec.value;\n    var options = spec.options;\n    _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].configEnv = spec.config;\n    _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].setLocation(\"spec\");\n    validateOptions(options);\n    _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].pushEnv(env);\n    if (options.env) {\n      _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].pushEnv(options.env);\n    }\n    var valueNode = value != undefined ? _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].create(options, value, \"spec\") : undefined;\n    if (valueNode) {\n      valueNode.env = env;   // Save environment for later analysis.\n    }\n    if (options.env) {\n      _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].popEnv(options.env);\n    }\n    _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].popEnv();\n    var evaluate = function evaluate(solution, resume) {\n      _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].setLocation(\"user\");\n      assert(solution != undefined, message(3002));\n      _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].pushEnv(env);\n      if (options.env) {\n        _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].pushEnv(options.env);\n      }\n      var solutionNode = _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].create(options, solution, \"user\");\n      if (!outerResult.model) {\n        // Patch the closed value if it isn't already set.\n        solutionNode.env = env;\n        outerResult.model = solutionNode;\n      }\n      _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].setLocation(\"spec\");\n      var result;\n      switch (method) {\n      case \"equivValue\":\n        assert(value != undefined, message(3003));\n        result = valueNode.equivValue(solutionNode, options);\n        break;\n      case \"equivLiteral\":\n        assert(value != undefined, message(3003));\n        result = valueNode.equivLiteral(solutionNode, options);\n        break;\n      case \"equivSyntax\":\n        assert(value != undefined, message(3003));\n        if (!(valueNode instanceof Array)) {\n          valueNode = [valueNode];\n        }\n        result = some(valueNode, function (n) {\n          return n.equivSyntax(solutionNode, options);\n        });\n        break;\n      case \"equivSymbolic\":\n        assert(value != undefined, message(3003));\n        result = valueNode.equivSymbolic(solutionNode, options, function (err, val) {\n          resume(err, val);\n        });\n        return;\n        break;\n      case \"isFactorised\":\n        result = solutionNode.isFactorised(options);\n        break;\n      case \"isSimplified\":\n        result = solutionNode.isSimplified(options);\n        break; //return;  // using resume\n      case \"isExpanded\":\n        result = solutionNode.isExpanded(options);\n        break;\n      case \"isUnit\":\n        result = valueNode.isUnit(solutionNode, options);\n        break;\n      case \"isTrue\":\n        result = solutionNode.isTrue(options);\n        break;\n      case \"calculate\":\n        result = solutionNode.calculate(options);\n        break;\n      case \"simplify\":\n        result = solutionNode.simplify(options);\n        break;\n      case \"expand\":\n        result = solutionNode.expand(options);\n        break;\n      case \"variables\":\n        result = solutionNode.variables(options);\n        break;\n      case \"format\":\n        result = valueNode.format(solutionNode, options);\n        break;\n      case \"validSyntax\":\n        // If we got this far, then value parsed.\n        result = true;\n        break;\n      default:\n        assert(false, message(3004, [method]));\n        break;\n      }\n      if (options.env) {\n        _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].popEnv(options.env);\n      }\n      _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"].popEnv();\n      resume([], result);\n    }\n    var outerResult = {\n      evaluate: evaluate,\n      model: valueNode\n    };\n    return outerResult;\n  }\n  return {\n    evaluate: evaluate,\n    evaluateVerbose: evaluateVerbose,\n    makeEvaluator: makeEvaluator,\n    setTimeoutDuration: setTimeoutDuration,\n    Model: _model_js__WEBPACK_IMPORTED_MODULE_3__[\"Model\"],\n    Ast: _ast_js__WEBPACK_IMPORTED_MODULE_2__[\"Ast\"],\n    foo: 20,\n  };\n})();\n\n\n//# sourceURL=webpack://MathCore/./src/mathcore.js?");

/***/ }),

/***/ "./src/model.js":
/*!**********************!*\
  !*** ./src/model.js ***!
  \**********************/
/*! exports provided: Model */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Model\", function() { return Model; });\n/* harmony import */ var _backward_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backward.js */ \"./src/backward.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert.js */ \"./src/assert.js\");\n/* harmony import */ var _ast_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ast.js */ \"./src/ast.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! decimal.js */ \"./node_modules/decimal.js/decimal.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(decimal_js__WEBPACK_IMPORTED_MODULE_3__);\n/*\n * Copyright 2013-2020 ARTCOMPILER INC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n  This module defines an object model for evaluating and comparing LaTex\n  strings. The primary data structure is the Model class. Instances of the\n  Model class contain an AST (Ast instance) and zero or more plugins that\n  provide functions for evaluating, transforming and comparing models.\n\n  Basic Terms\n\n  Node - a node is a raw JavaScript object that consists of an 'op' property\n  that is a string indicating the node type, an 'args' property that is an array\n  that holds the operands of the operation, and any other \"attribute\" properties\n  used by plugins to elaborate the mean meaning of the node.\n\n  AST - an AST is an a Node that is an instance of the Ast class. The Ast class\n  provides methods for constructing and managing nodes.\n\n  Model - a model is a Node that is an instance of the Model class, which\n  inherits from the Ast class. The model class adds methods for creating nodes\n  from LaTex strings and rendering them to LaTex strings. Model values are\n  configured by Model plugins that implement operations for evaluating,\n  transforming and comparing nodes.\n\n  Overview\n\n  Every model object is also a factory for other model objects that share\n  the same set of plugins.\n\n    Model.fn.isEquivalent; // register plugin function\n    let model = new Model;\n    let expected = model.create(options, \"1 + 2\");\n    let actual = model.create(options, response);\n    model.isEquivalent(expected, actual);\n    expected.isEquivalent(actual);\n\n  When all models in a particular JavaScript sandbox (global scope) use the same\n  plugins, those plugins can be registered with the Model class as default\n  plugins, as follows:\n\n*/\n\n\n\n\n\n\nlet Model = (function () {\n\n  function error(str) {\n    trace(\"error: \" + str);\n  }\n\n  function Model() {\n  }\n\n  let envStack = [];\n  let env = {};\n  Model.fn = {};\n  Model.env = env;\n\n  Model.pushEnv = function pushEnv(e) {\n    envStack.push(env);\n    Model.env = env = e;\n  };\n\n  Model.popEnv = function popEnv() {\n    Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(envStack.length > 0, \"1000: Empty envStack\");\n    Model.env = env = envStack.pop();\n  };\n\n  function isChemCore() {\n    // Has chem symbols so in chem mode.\n    return !!Model.env[\"Au\"];\n  }\n\n  let Mp = Model.prototype = new _ast_js__WEBPACK_IMPORTED_MODULE_2__[\"Ast\"]();\n\n  // Add messages here\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].reserveCodeRange(1000, 1999, \"model\");\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1000] = \"Internal error. %1.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1001] = \"Invalid syntax. '%1' expected, '%2' found.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1002] = \"Only one decimal separator can be specified.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1003] = \"Extra characters in input at position: %1, lexeme: %2, prefix: %3.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1004] = \"Invalid character '%1' (%2) in input.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1005] = \"Misplaced thousands separator.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1006] = \"Invalid syntax. Expression expected, %1 found.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1007] = \"Unexpected character: '%1' in '%2'.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1008] = \"The same character '%1' is being used as a thousands and decimal separators.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1009] = \"Missing argument for '%1' command.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1010] = \"Expecting an operator between numbers.\";\n  _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].messages[1011] = \"Invalid grouping bracket. %1\";\n  let message = _assert_js__WEBPACK_IMPORTED_MODULE_1__[\"Assert\"].message;\n\n  // Create a model from a node object or expression string\n  Model.create = Mp.create = function create(options, node, location) {\n    Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(node != undefined, message(1011));\n    // If we already have a model, then just return it.\n    if (node instanceof Model) {\n      if (location) {\n        node.location = location;\n      }\n      return node;\n    }\n    let model;\n    if (node instanceof Array) {\n      model = [];\n      Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(node, function (n) {\n        model.push(create(options, n, location));\n      });\n      return model;\n    }\n    if (!(this instanceof Model)) {\n      return new Model().create(options, node, location);\n    }\n    // Create a node that inherits from Ast.\n    model = create(options, this);\n    model.location = location;\n    if (typeof node === \"string\") {\n      // Got a string, so parse it into a node.\n      let parser = parse(options, node, Model.env);\n      node = parser.expr();\n    } else {\n      // Make a deep copy of the node.\n      node = JSON.parse(JSON.stringify(node));\n    }\n    // Add missing plugin functions to the Model prototype.\n    Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"keys\"])(Model.fn), function (v, i) {\n      if (!Mp.hasOwnProperty(v)) {\n        Mp[v] = function () {\n          let fn = Model.fn[v];\n          if (arguments.length > 1 &&\n              arguments[1] instanceof Model) {\n            return fn.apply(this, arguments);\n          } else {\n            let args = [this];\n            for (let i = 0; i < arguments.length; i++) {\n              args.push(arguments[i]);\n            }\n            return fn.apply(this, args);\n          }\n        };\n      }\n    });\n    // Now copy the node's properties into the model object.\n    Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"keys\"])(node), function (v, i) {\n      model[v] = node[v];\n    });\n    return model;\n  };\n\n  // Create a Model node from LaTex source.\n  Model.fromLaTeX = Mp.fromLaTeX = function fromLaTeX(options, src) {\n    Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(typeof src === \"string\", \"1000: Model.prototype.fromLaTex\");\n    if (!this) {\n      return Model.create(options, src);\n    }\n    return this.create(options, src);\n  };\n\n  // Render LaTex from the model node.\n  Mp.toLaTeX = function toLaTeX(node) {\n    return render(node);\n  };\n\n  let OpStr = {\n    ADD: \"+\",\n    SUB: \"-\",\n    MUL: \"mul\",\n    TIMES: \"times\",  // Special case for \"*\" and \"\\times\" in literals.\n    COEFF: \"coeff\",  // Special case for numeric coefficients in literals.\n    DIV: \"div\",\n    FRAC: \"frac\",\n    EQL: \"=\",\n    ATAN2: \"atan2\",\n    SQRT: \"sqrt\",\n    VEC: \"vec\",\n    PM: \"pm\",\n    NOT: \"not\",\n    SIN: \"sin\",\n    COS: \"cos\",\n    TAN: \"tan\",\n    SEC: \"sec\",\n    COT: \"cot\",\n    CSC: \"csc\",\n    ARCSIN: \"arcsin\",\n    ARCCOS: \"arccos\",\n    ARCTAN: \"arctan\",\n    ARCSEC: \"arcsec\",\n    ARCCOT: \"arccot\",\n    ARCCSC: \"arccsc\",\n    SINH: \"sinh\",\n    COSH: \"cosh\",\n    TANH: \"tanh\",\n    SECH: \"sech\",\n    COTH: \"coth\",\n    CSCH: \"csch\",\n    ARCSINH: \"arcsinh\",\n    ARCCOSH: \"arccosh\",\n    ARCTANH: \"arctanh\",\n    ARCSECH: \"arcsech\",\n    ARCCSCH: \"arccsch\",\n    ARCCOTH: \"arccoth\",\n    LOG: \"log\",\n    LN: \"ln\",\n    LG: \"lg\",\n    VAR: \"var\",\n    NUM: \"num\",\n    CST: \"cst\",\n    COMMA: \",\",\n    POW: \"^\",\n    SUBSCRIPT: \"_\",\n    ABS: \"abs\",\n    PAREN: \"()\",\n    HIGHLIGHT: \"hi\",\n    LT: \"lt\",\n    LE: \"le\",\n    GT: \"gt\",\n    GE: \"ge\",\n    NE: \"ne\",\n    NGTR: \"ngtr\",\n    NLESS: \"nless\",\n    NI: \"ni\",\n    SUBSETEQ: \"subseteq\",\n    SUPSETEQ: \"supseteq\",\n    SUBSET: \"subset\",\n    SUPSET: \"supset\",\n    NNI: \"nni\",\n    NSUBSETEQ: \"nsubseteq\",\n    NSUPSETEQ: \"nsupseteq\",\n    NSUBSET: \"nsubset\",\n    NSUPSET: \"nsupset\",\n    APPROX: \"approx\",\n    IMPLIES: \"implies\",\n    CAPRIGHTARROW: \"caprightarrow\",\n    RIGHTARROW: \"rightarrow\",\n    LEFTARROW: \"leftarrrow\",\n    LONGRIGHTARROW: \"longrightarrow\",\n    LONGLEFTARROW: \"longleftarrow\",\n    OVERRIGHTARROW: \"overrightarrow\",\n    OVERLEFTARROW: \"overleftarrow\",\n    CAPLEFTRIGHTARROW: \"capleftrightarrow\",\n    LEFTRIGHTARROW: \"leftrightarrow\",\n    LONGLEFTRIGHTARROW: \"longleftrightarrow\",\n    OVERLEFTRIGHTARROW: \"overleftrightarrow\",\n    PERP: \"perp\",\n    PROPTO: \"propto\",\n    PARALLEL: \"parallel\",\n    NPARALLEL: \"nparallel\",\n    SIM: \"sim\",\n    CONG: \"cong\",\n    INTERVAL: \"interval\",\n    INTERVALOPEN: \"intervalopen\",\n    INTERVALLEFTOPEN: \"intervalleftopen\",\n    INTERVALRIGHTOPEN: \"intervalrightopen\",\n    EVALAT: \"eval-at\",\n    LIST: \"list\",\n    SET: \"set\",\n    EXISTS: \"exists\",\n    IN: \"in\",\n    FORALL: \"forall\",\n    LIM: \"lim\",\n    EXP: \"exp\",\n    TO: \"to\",\n    SUM: \"sum\",\n    DERIV: \"deriv\",\n    PIPE: \"pipe\",\n    INTEGRAL: \"integral\",\n    PROD: \"prod\",\n    CUP: \"cup\",\n    BIGCUP: \"bigcup\",\n    CAP: \"cap\",\n    BIGCAP: \"bigcap\",\n    PERCENT: \"%\",\n    QMARK: \"?\",\n    M: \"M\",\n    RIGHTARROW: \"rightarrow\",\n    FACT: \"fact\",\n    BINOM: \"binom\",\n    ROW: \"row\",\n    COL: \"col\",\n    COLON: \"colon\",\n    MATRIX: \"matrix\",\n    TYPE: \"type\",\n    FORMAT: \"format\",\n    OVERSET: \"overset\",\n    UNDERSET: \"underset\",\n    OVERLINE: \"overline\",\n    DEGREE: \"degree\",\n    BACKSLASH: \"backslash\",\n    MATHBF: \"mathbf\",\n    DOT: \"dot\",\n    MATHFIELD: \"mathfield\",\n    DELTA: \"delta\",\n    OPERATORNAME: \"operatorname\",\n    NONE: \"none\",\n  };\n\n  Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"keys\"])(OpStr), function (v, i) {\n    Model[v] = OpStr[v];\n  });\n\n  let OpToLaTeX = {};\n  OpToLaTeX[OpStr.ADD] = \"+\";\n  OpToLaTeX[OpStr.SUB] = \"-\";\n  OpToLaTeX[OpStr.MUL] = \"\\\\times\";\n  OpToLaTeX[OpStr.DIV] = \"\\\\div\";\n  OpToLaTeX[OpStr.FRAC] = \"\\\\frac\";\n  OpToLaTeX[OpStr.EQL] = \"=\";\n  OpToLaTeX[OpStr.ATAN2] = \"\\\\atan2\";\n  OpToLaTeX[OpStr.POW] = \"^\";\n  OpToLaTeX[OpStr.SUBSCRIPT] = \"_\";\n  OpToLaTeX[OpStr.PM] = \"\\\\pm\";\n  OpToLaTeX[OpStr.NOT] = \"\\\\not\";\n  OpToLaTeX[OpStr.SIN] = \"\\\\sin\";\n  OpToLaTeX[OpStr.COS] = \"\\\\cos\";\n  OpToLaTeX[OpStr.TAN] = \"\\\\tan\";\n  OpToLaTeX[OpStr.SEC] = \"\\\\sec\";\n  OpToLaTeX[OpStr.COT] = \"\\\\cot\";\n  OpToLaTeX[OpStr.CSC] = \"\\\\csc\";\n  OpToLaTeX[OpStr.ARCSIN] = \"\\\\arcsin\";\n  OpToLaTeX[OpStr.ARCCOS] = \"\\\\arccos\";\n  OpToLaTeX[OpStr.ARCTAN] = \"\\\\arctan\";\n  OpToLaTeX[OpStr.ARCSEC] = \"\\\\arcsec\";\n  OpToLaTeX[OpStr.ARCCOT] = \"\\\\arccot\";\n  OpToLaTeX[OpStr.ARCCSC] = \"\\\\arccsc\";\n  OpToLaTeX[OpStr.SEC] = \"\\\\sec\";\n  OpToLaTeX[OpStr.COT] = \"\\\\cot\";\n  OpToLaTeX[OpStr.CSC] = \"\\\\csc\";\n  OpToLaTeX[OpStr.SINH] = \"\\\\sinh\";\n  OpToLaTeX[OpStr.COSH] = \"\\\\cosh\";\n  OpToLaTeX[OpStr.TANH] = \"\\\\tanh\";\n  OpToLaTeX[OpStr.ARCSINH] = \"\\\\arcsinh\";\n  OpToLaTeX[OpStr.ARCCOSH] = \"\\\\arccosh\";\n  OpToLaTeX[OpStr.ARCTANH] = \"\\\\arctanh\";\n  OpToLaTeX[OpStr.ARCSECH] = \"\\\\arcsech\";\n  OpToLaTeX[OpStr.ARCCSCH] = \"\\\\arccsch\";\n  OpToLaTeX[OpStr.ARCCOTH] = \"\\\\arccoth\";\n  OpToLaTeX[OpStr.SECH] = \"\\\\sech\";\n  OpToLaTeX[OpStr.COTH] = \"\\\\coth\";\n  OpToLaTeX[OpStr.CSCH] = \"\\\\csch\";\n  OpToLaTeX[OpStr.LN] = \"\\\\ln\";\n  OpToLaTeX[OpStr.COMMA] = \",\";\n  OpToLaTeX[OpStr.M] = \"\\\\M\";\n  OpToLaTeX[OpStr.BINOM] = \"\\\\binom\";\n  OpToLaTeX[OpStr.COLON] = \"\\\\colon\";\n  OpToLaTeX[OpStr.INT] = \"\\\\int\";\n\n  Model.fold = function fold(node, env) {\n    let args = [], val;\n    Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(node.args, function (n) {\n      args.push(fold(n, env));\n    });\n    node.args = args;\n    switch (node.op) {\n    case OpStr.VAR:\n      if ((val = env[node.args[0]])) {\n        node = val;  // Replace var node with its value.\n      }\n      break;\n    default:\n      // Nothing to fold.\n      break;\n    }\n    return node;\n  };\n  function isControlCharCode(c) {\n    return (\n      c >= 0x0001 && c <= 0x001F ||\n        c >= 0x007F && c <= 0x009F\n    );\n  }\n  function isListBreakToken(tk) {\n    return (\n      tk === TK_RIGHTPAREN ||\n        tk === TK_RIGHTBRACE ||\n        tk === TK_RIGHTBRACKET ||\n        tk === TK_NEWROW ||\n        tk === TK_NEWCOL ||\n        tk === TK_END ||\n        tk === TK_NONE\n    );\n  }\n  function stripInvisible(src) {\n    let out = \"\";\n    let c, lastCharCode;\n    let curIndex = 0;\n    while(curIndex < src.length) {\n      while (curIndex < src.length && isInvisibleCharCode((c = src.charCodeAt(curIndex++)))) {\n        if (lastCharCode === 32) {\n          // Replace N invisible char with one space char.\n          continue;\n        }\n        c = 9;\n        lastCharCode = c;\n      }\n      if (c === 92) {\n        // Backslash.\n        out += String.fromCharCode(c);\n        if (curIndex < src.length) {\n          // Keep next character if not out of chars.\n          c = src.charCodeAt(curIndex++);\n        }\n      } else if (c === 9) {\n        // Got an invisible character, check if separating numbers.\n        if (isNumberCharCode(out.charCodeAt(out.length - 1)) && isNumberCharCode(src.charCodeAt(curIndex))) {\n          // Erase the space.\n          c = src.charCodeAt(curIndex++);\n        }\n      }\n      out += String.fromCharCode(c);\n    }\n    return out;\n  }\n  function isInvisibleCharCode(c) {\n    return isControlCharCode(c);\n  }\n  function isWhitespaceCharCode(c) {\n    return (\n      c === 32 ||\n        c === 9  ||\n        c === 10 ||\n        c === 13\n    );\n  }\n  function isAlphaCharCode(c) {\n    return c >= 65 && c <= 90 ||\n      c >= 97 && c <= 122 ||\n      c === 39; // prime\n  }\n  function isNumberCharCode(c) {\n    return (\n      c >= 48 && c <= 57\n    );\n  }\n  // Render AST to LaTeX\n  let render = function render(n) {\n    let text = \"\";\n    if (typeof n === \"string\") {\n      text = n;\n    } else if (typeof n === \"number\") {\n      text = n;\n    } else if (typeof n === \"object\") {\n      // Render sub-expressions.\n      let args = [];\n      for (let i = 0; i < n.args.length; i++) {\n        args[i] = render(n.args[i]);\n      }\n      // Render operator.\n      switch (n.op) {\n      case OpStr.NUM:\n        text = \"(\" + n.args[0] + \")\";\n        break;\n      case OpStr.VAR:\n      case OpStr.CST:\n        text = \" \" + n.args[0] + \" \";\n        break;\n      case OpStr.SUB:\n        if (n.args.length===1) {\n          text = OpToLaTeX[n.op] + \" \" + args[0];\n        }\n        else {\n          text = args[0] + \" \" + OpToLaTeX[n.op] + \" \" + args[1];\n        }\n        break;\n      case OpStr.DIV:\n      case OpStr.PM:\n      case OpStr.EQL:\n        text = args[0] + \" \" + OpToLaTeX[n.op] + \" \" + args[1];\n        break;\n      case OpStr.POW:\n        // If subexpr is lower precedence, wrap in parens.\n        let lhs = n.args[0];\n        let rhs = n.args[1];\n        if ((lhs.args && lhs.args.length===2) || (rhs.args && rhs.args.length===2)) {\n          if (lhs.op===OpStr.ADD || lhs.op===OpStr.SUB ||\n              lhs.op===OpStr.MUL || lhs.op===OpStr.DIV ||\n              lhs.op===OpStr.SQRT) {\n            args[0] = \" (\" + args[0] + \") \";\n          }\n        }\n        text = \"{\" + args[0] + \"^{\" + args[1] + \"}}\";\n        break;\n      case OpStr.SIN:\n      case OpStr.COS:\n      case OpStr.TAN:\n      case OpStr.ARCSIN:\n      case OpStr.ARCCOS:\n      case OpStr.ARCTAN:\n      case OpStr.ARCSEC:\n      case OpStr.ARCCSC:\n      case OpStr.ARCCOT:\n      case OpStr.SEC:\n      case OpStr.COT:\n      case OpStr.CSC:\n      case OpStr.SINH:\n      case OpStr.COSH:\n      case OpStr.TANH:\n      case OpStr.ARCSINH:\n      case OpStr.ARCCOSH:\n      case OpStr.ARCTANH:\n      case OpStr.ARCSECH:\n      case OpStr.ARCCSCH:\n      case OpStr.ARCCOTH:\n      case OpStr.SECH:\n      case OpStr.COTH:\n      case OpStr.CSCH:\n      case OpStr.LN:\n      case OpStr.M:\n        text = \"{\"+ OpToLaTeX[n.op] + \"{\" + args[0] + \"}}\";\n        break;\n      case OpStr.FRAC:\n        text = \"\\\\frac{\" + args[0] + \"}{\" + args[1] + \"}\";\n        break;\n      case OpStr.BINOM:\n        text = \"\\\\binom{\" + args[0] + \"}{\" + args[1] + \"}\";\n        break;\n      case OpStr.SQRT:\n        switch (args.length) {\n        case 1:\n          text = \"\\\\sqrt{\" + args[0] + \"}\";\n          break;\n        case 2:\n          text = \"\\\\sqrt[\" + args[0] + \"]{\" + args[1] + \"}\";\n          break;\n        }\n        break;\n      case OpStr.INT:\n        text = \"\\\\int \" + args[0];\n        break;\n      case OpStr.VEC:\n        text = \"\\\\vec{\" + args[0] + \"}\";\n        break;\n      case OpStr.MUL:\n        // If subexpr is lower precedence, wrap in parens.\n        let prevTerm;\n        text = \"\";\n        Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(n.args, function (term, index) {\n          if (term.args && (term.args.length >= 2)) {\n            if (term.op===OpStr.ADD || term.op===OpStr.SUB) {\n              args[index] = \"(\" + args[index] + \")\";\n            }\n            if (index !== 0 && typeof term === \"number\") {\n              text += OpToLaTeX[n.op] + \" \";\n            } else if (n.isMixedNumber) {\n              // Do nothing. Implicit plus.\n            } else if (n.isScientific) {\n              text += \"\\\\times \";\n            }\n            text += args[index];\n          }\n          // Elide the times symbol if rhs is parenthesized or a var, or lhs is a number\n          // nd rhs is not a number.\n          else if (term.op===OpStr.PAREN ||\n               term.op===OpStr.VAR ||\n               term.op===OpStr.CST ||\n               typeof prevTerm === \"number\" && typeof term !== \"number\") {\n            text += args[index];\n          }\n          else {\n            if (index !== 0) {\n              text += \" \" + OpToLaTeX[n.op] + \" \";\n            }\n            text += args[index];\n          }\n          prevTerm = term;\n        });\n        break;\n      case OpStr.ADD:\n      case OpStr.COMMA:\n        Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(args, function (value, index) {\n          if (index===0) {\n            text = value;\n          }\n          else {\n            text = text + \" \"+ OpToLaTeX[n.op] + \" \" + value;\n          }\n        });\n        break;\n      case OpStr.NONE:\n        text = \"\";\n        break;\n      default:\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, \"1000: Unimplemented operator translating to LaTeX: \" + n.op);\n        break;\n      }\n    }\n    else {\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, \"1000: Invalid expression type\");\n    }\n    return text;\n  }\n\n  // Character defines.\n  const CC_SPACE = 0x20;\n  const CC_BANG = 0x21;\n  const CC_DOLLAR = 0x24;\n  const CC_PERCENT = 0x25;\n  const CC_LEFTPAREN = 0x28;\n  const CC_MUL = 0x2A;\n  const CC_ADD = 0x2B;\n  const CC_COMMA = 0x2C;\n  const CC_SUB = 0x2D;\n  const CC_RIGHTPAREN = 0x29;\n  const CC_PERIOD = 0x2E;\n  const CC_SLASH = 0x2F;\n  const CC_NUM = 0x30;\n  const CC_COLON = 0x3A;\n  const CC_SEMICOLON = 0x3B;\n  const CC_EQL = 0x3D;\n  const CC_QMARK = 0x3F;\n  const CC_CONST = 0x41;\n  const CC_LEFTBRACKET = 0x5B;\n  const CC_RIGHTBRACKET = 0x5D;\n  const CC_CARET = 0x5E;\n  const CC_UNDERSCORE = 0x5F;\n  const CC_VAR = 0x61;\n  const CC_LEFTBRACE = 0x7B;\n  const CC_VERTICALBAR = 0x7C;\n  const CC_RIGHTBRACE = 0x7D;\n  const CC_SINGLEQUOTE = 0x27;\n\n  // Token defines.\n  const TK_NONE = 0;\n  const TK_ADD = CC_ADD;\n  const TK_CARET = CC_CARET;\n  const TK_UNDERSCORE = CC_UNDERSCORE;\n  const TK_PERIOD = CC_PERIOD;\n  const TK_COS = 0x105;\n  const TK_COT = 0x108;\n  const TK_CSC = 0x109;\n  const TK_FRAC = 0x100;\n  const TK_SLASH = CC_SLASH;\n  const TK_EQL = CC_EQL;\n  const TK_LN = 0x107;\n  const TK_LEFTBRACE = CC_LEFTBRACE;\n  const TK_VERTICALBAR = CC_VERTICALBAR;\n  const TK_LEFTBRACKET = CC_LEFTBRACKET;\n  const TK_LEFTPAREN = CC_LEFTPAREN;\n  const TK_MUL = CC_MUL;\n  const TK_NUM = CC_NUM;\n  const TK_PM = 0x102;\n  const TK_RIGHTBRACE = CC_RIGHTBRACE;\n  const TK_RIGHTBRACKET = CC_RIGHTBRACKET;\n  const TK_RIGHTPAREN = CC_RIGHTPAREN;\n  const TK_SEC = 0x106;\n  const TK_SIN = 0x103;\n  const TK_SQRT = 0x101;\n  const TK_SUB = CC_SUB;\n  const TK_TAN = 0x104;\n  const TK_VAR = CC_VAR;\n  const TK_CONST = CC_CONST;\n  const TK_NEXT = 0x10A;\n  const TK_COMMA = CC_COMMA;\n  const TK_PERCENT = CC_PERCENT;\n  const TK_QMARK = CC_QMARK;\n  const TK_BANG = CC_BANG;\n  const TK_COLON = CC_COLON;\n  const TK_SEMICOLON = CC_SEMICOLON;\n  const TK_LG = 0x10B;\n  const TK_LOG = 0x10C;\n  const TK_TEXT = 0x10D;\n  const TK_LT = 0x10E;\n  const TK_LE = 0x10F;\n  const TK_GT = 0x110;\n  const TK_GE = 0x111;\n  const TK_EXISTS = 0x112;\n  const TK_IN = 0x113;\n  const TK_FORALL = 0x114;\n  const TK_LIM = 0x115;\n  const TK_EXP = 0x116;\n  const TK_TO = 0x117;\n  const TK_SUM = 0x118;\n  const TK_INT = 0x119;\n  const TK_PROD = 0x11A;\n  const TK_M = 0x11B;\n  const TK_RIGHTARROW = 0x11C;\n  const TK_BINOM = 0x11D;\n  const TK_NEWROW = 0x11E;\n  const TK_NEWCOL = 0x11F;\n  const TK_BEGIN = 0x120;\n  const TK_END = 0x121;\n  const TK_VEC = 0x122;\n  const TK_ARCSIN = 0x123;\n  const TK_ARCCOS = 0x124;\n  const TK_ARCTAN = 0x125;\n  const TK_DIV = 0x126;\n  const TK_TYPE = 0x127;\n  const TK_OVERLINE = 0x128;\n  const TK_OVERSET = 0x129;\n  const TK_UNDERSET = 0x12A;\n  const TK_BACKSLASH = 0x12B;\n  const TK_MATHBF = 0x12C;\n  const TK_NE = 0x12D;\n  const TK_APPROX = 0x12E;\n  const TK_ABS = 0x12F;\n  const TK_DOT = 0x130;\n  const TK_NGTR = 0x131;\n  const TK_NLESS = 0x132;\n  const TK_SINH = 0x133;\n  const TK_COSH = 0x134;\n  const TK_TANH = 0x135;\n  const TK_SECH = 0x136;\n  const TK_COTH = 0x137;\n  const TK_CSCH = 0x138;\n  const TK_ARCSINH = 0x139;\n  const TK_ARCCOSH = 0x13A;\n  const TK_ARCTANH = 0x13B;\n  const TK_FORMAT = 0x14C;\n  const TK_NI = 0x14D;\n  const TK_ARCSECH = 0x14E;\n  const TK_ARCCSCH = 0x14F;\n  const TK_ARCCOTH = 0x150;\n  const TK_ARCSEC = 0x151;\n  const TK_ARCCSC = 0x152;\n  const TK_ARCCOT = 0x153;\n  const TK_MATHFIELD = 0x154;\n  const TK_CUP = 0x155;\n  const TK_BIGCUP = 0x156;\n  const TK_CAP = 0x157;\n  const TK_BIGCAP = 0x158;\n  const TK_PERP = 0x159;\n  const TK_PROPTO = 0x15A;\n  const TK_SUBSETEQ = 0x15B;\n  const TK_SUPSETEQ = 0x15C;\n  const TK_SUBSET = 0x15D;\n  const TK_SUPSET = 0x15E;\n  const TK_NOT = 0x15F;\n  const TK_PARALLEL = 0x160;\n  const TK_NPARALLEL = 0x161;\n  const TK_SIM = 0x162;\n  const TK_CONG = 0x163;\n  const TK_LEFTARROW = 0x164;\n  const TK_LONGRIGHTARROW = 0x165;\n  const TK_LONGLEFTARROW = 0x166;\n  const TK_OVERRIGHTARROW = 0x167;\n  const TK_OVERLEFTARROW = 0x168;\n  const TK_LONGLEFTRIGHTARROW = 0x169;\n  const TK_OVERLEFTRIGHTARROW = 0x16A;\n  const TK_IMPLIES = 0x16B;\n  const TK_LEFTRIGHTARROW = 0x16C;\n  const TK_CAPLEFTRIGHTARROW = 0x16D;\n  const TK_CAPRIGHTARROW = 0x16E;\n  const TK_DELTA = 0x16F;\n  const TK_OPERATORNAME = 0x170;\n  const TK_LEFTCMD = 0x171;\n  const TK_RIGHTCMD = 0x172;\n  const TK_LEFTBRACESET = 0x173;\n  const TK_RIGHTBRACESET = 0x174;\n  let T0 = TK_NONE, T1 = TK_NONE;\n\n  // Define mapping from token to operator\n  const tokenToOperator = {};\n  tokenToOperator[TK_SLASH] = OpStr.FRAC;\n  tokenToOperator[TK_FRAC] = OpStr.FRAC;\n  tokenToOperator[TK_SQRT] = OpStr.SQRT;\n  tokenToOperator[TK_VEC] = OpStr.VEC;\n  tokenToOperator[TK_ADD] = OpStr.ADD;\n  tokenToOperator[TK_SUB] = OpStr.SUB;\n  tokenToOperator[TK_PM] = OpStr.PM;\n  tokenToOperator[TK_NOT] = OpStr.NOT;\n  tokenToOperator[TK_CARET] = OpStr.POW;\n  tokenToOperator[TK_UNDERSCORE] = OpStr.SUBSCRIPT;\n  tokenToOperator[TK_MUL] = OpStr.MUL;\n  tokenToOperator[TK_DOT] = OpStr.DOT;\n  tokenToOperator[TK_DIV] = OpStr.DIV;\n  tokenToOperator[TK_SIN] = OpStr.SIN;\n  tokenToOperator[TK_COS] = OpStr.COS;\n  tokenToOperator[TK_TAN] = OpStr.TAN;\n  tokenToOperator[TK_ARCSIN] = OpStr.ARCSIN;\n  tokenToOperator[TK_ARCCOS] = OpStr.ARCCOS;\n  tokenToOperator[TK_ARCTAN] = OpStr.ARCTAN;\n  tokenToOperator[TK_ARCSEC] = OpStr.ARCSEC;\n  tokenToOperator[TK_ARCCSC] = OpStr.ARCCSC;\n  tokenToOperator[TK_ARCCOT] = OpStr.ARCCOT;\n  tokenToOperator[TK_SEC] = OpStr.SEC;\n  tokenToOperator[TK_COT] = OpStr.COT;\n  tokenToOperator[TK_CSC] = OpStr.CSC;\n  tokenToOperator[TK_SINH] = OpStr.SINH;\n  tokenToOperator[TK_COSH] = OpStr.COSH;\n  tokenToOperator[TK_TANH] = OpStr.TANH;\n  tokenToOperator[TK_ARCSINH] = OpStr.ARCSINH;\n  tokenToOperator[TK_ARCCOSH] = OpStr.ARCCOSH;\n  tokenToOperator[TK_ARCTANH] = OpStr.ARCTANH;\n  tokenToOperator[TK_ARCSECH] = OpStr.ARCSECH;\n  tokenToOperator[TK_ARCCSCH] = OpStr.ARCCSCH;\n  tokenToOperator[TK_ARCCOTH] = OpStr.ARCCOTH;\n  tokenToOperator[TK_SECH] = OpStr.SECH;\n  tokenToOperator[TK_COTH] = OpStr.COTH;\n  tokenToOperator[TK_CSCH] = OpStr.CSCH;\n  tokenToOperator[TK_LN] = OpStr.LN;\n  tokenToOperator[TK_LG] = OpStr.LG;\n  tokenToOperator[TK_LOG] = OpStr.LOG;\n  tokenToOperator[TK_EQL] = OpStr.EQL;\n  tokenToOperator[TK_COMMA] = OpStr.COMMA;\n  tokenToOperator[TK_TEXT] = OpStr.TEXT;\n  tokenToOperator[TK_OPERATORNAME] = OpStr.OPERATORNAME;\n  tokenToOperator[TK_LT] = OpStr.LT;\n  tokenToOperator[TK_LE] = OpStr.LE;\n  tokenToOperator[TK_GT] = OpStr.GT;\n  tokenToOperator[TK_GE] = OpStr.GE;\n  tokenToOperator[TK_NE] = OpStr.NE;\n  tokenToOperator[TK_NGTR] = OpStr.NGTR;\n  tokenToOperator[TK_NLESS] = OpStr.NLESS;\n  tokenToOperator[TK_NI] = OpStr.NI;\n  tokenToOperator[TK_SUBSETEQ] = OpStr.SUBSETEQ;\n  tokenToOperator[TK_SUPSETEQ] = OpStr.SUPSETEQ;\n  tokenToOperator[TK_SUBSET] = OpStr.SUBSET;\n  tokenToOperator[TK_SUPSET] = OpStr.SUPSET;\n  tokenToOperator[TK_APPROX] = OpStr.APPROX;\n  tokenToOperator[TK_PERP] = OpStr.PERP;\n  tokenToOperator[TK_PROPTO] = OpStr.PROPTO;\n  tokenToOperator[TK_PARALLEL] = OpStr.PARALLEL;\n  tokenToOperator[TK_NPARALLEL] = OpStr.NPARALLEL;\n  tokenToOperator[TK_SIM] = OpStr.SIM;\n  tokenToOperator[TK_CONG] = OpStr.CONG;\n  tokenToOperator[TK_EXISTS] = OpStr.EXISTS;\n  tokenToOperator[TK_IN] = OpStr.IN;\n  tokenToOperator[TK_FORALL] = OpStr.FORALL;\n  tokenToOperator[TK_LIM] = OpStr.LIM;\n  tokenToOperator[TK_EXP] = OpStr.EXP;\n  tokenToOperator[TK_TO] = OpStr.TO;\n  tokenToOperator[TK_VERTICALBAR] = OpStr.PIPE;\n  tokenToOperator[TK_SUM] = OpStr.SUM;\n  tokenToOperator[TK_INT] = OpStr.INTEGRAL;\n  tokenToOperator[TK_PROD] = OpStr.PROD;\n  tokenToOperator[TK_CUP] = OpStr.CUP;\n  tokenToOperator[TK_BIGCUP] = OpStr.BIGCUP;\n  tokenToOperator[TK_CAP] = OpStr.CAP;\n  tokenToOperator[TK_BIGCAP] = OpStr.BIGCAP;\n  tokenToOperator[TK_M] = OpStr.M;\n  tokenToOperator[TK_IMPLIES] = OpStr.IMPLIES;\n  tokenToOperator[TK_CAPRIGHTARROW] = OpStr.CAPRIGHTARROW;\n  tokenToOperator[TK_RIGHTARROW] = OpStr.RIGHTARROW;\n  tokenToOperator[TK_LEFTARROW] = OpStr.LEFTARROW;\n  tokenToOperator[TK_LONGRIGHTARROW] = OpStr.LONGRIGHTARROW;\n  tokenToOperator[TK_LONGLEFTARROW] = OpStr.LONGLEFTARROW;\n  tokenToOperator[TK_OVERRIGHTARROW] = OpStr.OVERRIGHTARROW;\n  tokenToOperator[TK_OVERLEFTARROW] = OpStr.OVERLEFTARROW;\n  tokenToOperator[TK_LEFTRIGHTARROW] = OpStr.LEFTRIGHTARROW;\n  tokenToOperator[TK_CAPLEFTRIGHTARROW] = OpStr.CAPLEFTRIGHTARROW;\n  tokenToOperator[TK_LONGLEFTRIGHTARROW] = OpStr.LONGLEFTRIGHTARROW;\n  tokenToOperator[TK_OVERLEFTRIGHTARROW] = OpStr.OVERLEFTRIGHTARROW;\n\n  tokenToOperator[TK_BANG] = OpStr.FACT;\n  tokenToOperator[TK_BINOM] = OpStr.BINOM;\n  tokenToOperator[TK_NEWROW] = OpStr.ROW;\n  tokenToOperator[TK_NEWCOL] = OpStr.COL;\n  tokenToOperator[TK_COLON] = OpStr.COLON;\n  tokenToOperator[TK_SEMICOLON] = OpStr.SEMICOLON;\n  tokenToOperator[TK_TYPE] = OpStr.TYPE;\n  tokenToOperator[TK_OVERLINE] = OpStr.OVERLINE;\n  tokenToOperator[TK_OVERSET] = OpStr.OVERSET;\n  tokenToOperator[TK_UNDERSET] = OpStr.UNDERSET;\n  tokenToOperator[TK_BACKSLASH] = OpStr.BACKSLASH;\n  tokenToOperator[TK_MATHBF] = OpStr.MATHBF;\n  tokenToOperator[TK_DOT] = OpStr.DOT;\n  tokenToOperator[TK_MATHFIELD] = OpStr.MATHFIELD;\n  tokenToOperator[TK_DELTA] = OpStr.DELTA;\n\n  let parse = function parse(options, src, env) {\n    src = stripInvisible(src);\n    function newNode(op, args) {\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(op && op !== \"arcbigcap\");\n      return {\n        op: op,\n        args: args\n      };\n    }\n\n    function matchThousandsSeparator(ch, last) {\n      // Check separator and return if there is a match.\n      if (Model.option(options, \"allowThousandsSeparator\") || Model.option(options, \"setThousandsSeparator\")) {\n        let separators = Model.option(options, \"setThousandsSeparator\");\n        if (!separators) {\n          // Use defaults.\n          return ch === ',' ? ch : '';\n        } else {\n          // If the character matches the last separator or, if not, last is undefiend\n          // and character is in the provided list, return the character.\n          if (ch === last || !last && Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(separators, ch) >= 0) {\n            return ch;\n          } else {\n            return \"\";\n          }\n        }\n      }\n      // Not allowed. Will be treated as punctuation of some other kind.\n      return '';\n    }\n\n    function matchDecimalSeparator(ch) {\n      // We use the thousands separator to determine the conventional decimal\n      // separator. If TS is ',' then DS is '.', otherwise DS is ','.\n      let decimalSeparator = Model.option(options, \"setDecimalSeparator\");\n      let thousandsSeparators = Model.option(options, \"setThousandsSeparator\");\n      if (typeof decimalSeparator === \"string\") {\n        // Single separator.\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(decimalSeparator.length === 1, message(1002));\n        let separator = decimalSeparator;\n        if (thousandsSeparators instanceof Array &&\n            Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(thousandsSeparators, separator) >= 0) {\n          // There is a conflict between the decimal separator and the\n          // thousands separator.\n          Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1008, [separator]));\n        }\n        return ch === separator;\n      }\n      if (decimalSeparator instanceof Array) {\n        // Multiple separators.\n        Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(decimalSeparator, function (separator) {\n          if (thousandsSeparators instanceof Array &&\n              Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(thousandsSeparators, separator) >= 0) {\n            // There is a conflict between the decimal separator and the\n            // thousands separator.\n            Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1008, [separator]));\n          }\n        });\n        return Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(decimalSeparator, ch) >= 0;\n      }\n      if (thousandsSeparators instanceof Array && Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(thousandsSeparators, '.') >= 0) {\n        // Period is used as a thousands separator, so cannot be used as a\n        // decimal separator.\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1008));\n        return false;\n      }\n      // Otherwise, period is used as the decimal separator.\n      return ch === \".\";\n    }\n\n    // Construct a number node.\n    function numberNode(n0, doScale, roundOnly) {\n      // doScale - scale n if true\n      // roundOnly - only scale if rounding\n      let ignoreTrailingZeros = Model.option(options, \"ignoreTrailingZeros\");\n      let n1 = n0.toString();\n      let n2 = \"\";\n      let i, ch;\n      let lastSeparatorIndex, lastSignificantIndex;\n      let separatorCount = 0;\n      let numberFormat = \"integer\";\n      let hasLeadingZero, hasTrailingZero;\n      if (n0 === \".\") {\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1004, [n0, n0.charCodeAt(0)]));\n      }\n      for (i = 0; i < n1.length; i++) {\n        if (matchThousandsSeparator(ch = n1.charAt(i))) {\n          if (separatorCount && lastSeparatorIndex !== i - 4 ||\n              !separatorCount && i > 4) {\n            Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1005));\n          }\n          lastSeparatorIndex = i;\n          separatorCount++;\n          // We erase separators so 1,000 and 1000 are equivLiteral.\n        } else {\n          if (matchDecimalSeparator(ch)) {\n            if (numberFormat === \"decimal\") {\n              Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1007, [ch, n2 + ch]));\n            }\n            ch = '.';  // Convert to character the decimal agrees with.\n            numberFormat = \"decimal\";\n            if (separatorCount && lastSeparatorIndex !== i - 4) {\n              Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1005));\n            }\n            lastSignificantIndex = n2.length;\n            lastSeparatorIndex = i;  // Used for thousandths separators.\n            separatorCount++;\n          } else if (numberFormat === \"decimal\") {\n            if (ch !== \"0\") {\n              lastSignificantIndex = n2.length;\n            }\n          }\n          n2 += ch;\n        }\n      }\n      if (numberFormat !== \"decimal\" && lastSeparatorIndex && lastSeparatorIndex !== i - 4) {\n        // If we haven't seen a decimal separator, then make sure the last thousands\n        // separator is in the right place.\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1005));\n      }\n      if (lastSignificantIndex !== undefined) {\n        if (lastSignificantIndex + 1 < n2.length) {\n          hasTrailingZero = true;\n        }\n        if (ignoreTrailingZeros) {\n          n2 = n2.substring(0, lastSignificantIndex + 1);\n          if (n2 === \".\") {\n            // \".0\" -> \".\" -> \"0\"\n            n2 = \"0\";\n          }\n        }\n      }\n      // Count leading zeros.\n      hasLeadingZero = 0;\n      var done = false;\n      n2.split(\"\").forEach(function (d) {\n        if (+d === 0 && !done) {\n          hasLeadingZero++;\n        } else {\n          done = true;\n        }\n      });\n      n2 = new decimal_js__WEBPACK_IMPORTED_MODULE_3__[\"Decimal\"](n2);   // Normalize representation.\n      if (doScale) {\n        let scale = option(\"decimalPlaces\")\n        if (!roundOnly || n2.scale() > scale) {\n          n2 = n2.setScale(scale, decimal_js__WEBPACK_IMPORTED_MODULE_3__[\"Decimal\"].ROUND_HALF_UP);\n        }\n      }\n      return {\n        op: Model.NUM,\n        args: [String(n2)],\n        hasThousandsSeparator: separatorCount !== 0,\n        numberFormat: numberFormat,\n        hasLeadingZero: hasLeadingZero,\n        hasTrailingZero: hasTrailingZero\n      }\n    }\n    function multiplyNode(args, flatten) {\n      if (args.length === 0) {\n        // We have simplified away all factors.\n        args = [nodeOne];\n      }\n      return binaryNode(Model.MUL, args, flatten);\n    }\n    function fractionNode(n, d) {\n      return multiplyNode([n, binaryNode(Model.POW, [d, nodeMinusOne])], true);\n    }\n    function unaryNode(op, args) {\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(args.length === 1, \"1000: Wrong number of arguments for unary node\");\n      return newNode(op, args);\n    }\n    function binaryNode(op, args, flatten) {\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(args.length > 0, \"1000: Too few argument for binary node\");\n      if (args.length < 2) {\n        return args[0];\n      }\n      let aa = [];\n      Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(args, function(n) {\n        if (flatten && n.op === op) {\n          aa = aa.concat(n.args);\n        } else {\n          aa.push(n);\n        }\n      });\n      return newNode(op, aa);\n    }\n\n    let nodeOne = numberNode(\"1\");\n    let nodeMinusOne = unaryNode(Model.SUB, [numberNode(\"1\")]);\n    let nodeNone = newNode(Model.NONE, [numberNode(\"0\")]);\n    let nodeEmpty = newNode(Model.VAR, [\"0\"]);\n\n    //\n    // PARSER\n    //\n    // Manage the token stream.\n    let T0 = TK_NONE;\n    let T1 = TK_NONE;\n    let lexemeT0, lexemeT1;\n    let scan = scanner(src);\n    // Prime the token stream.\n    function start(options) {\n      T0 = scan.start(options);\n      lexemeT0 = scan.lexeme(options);\n    }\n    // Get the current token.\n    function hd() {\n      return T0;\n    }\n    // Get the current lexeme.\n    function lexeme(options) {\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(lexemeT0 !== undefined, \"1000: Lexeme for token T0=\" + T0 + \" is missing.\");\n      return lexemeT0;\n    }\n    // Advance the next token.\n    function next(options) {\n      if (T1 === TK_NONE) {\n        T0 = scan.start(options);\n        lexemeT0 = scan.lexeme(options);\n      } else {\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(lexemeT1 !== undefined, \"1000: Lexeme for token=\" + T1 + \" is missing.\");\n        T0 = T1;\n        lexemeT0 = lexemeT1;\n        T1 = TK_NONE;\n      }\n    }\n    function lookahead(options) {\n      if (T1 === TK_NONE) {\n        T1 = scan.start(options);\n        lexemeT1 = scan.lexeme(options);\n      }\n      return T1;\n    }\n    // Consume the current token if it matches, otherwise throw.\n    function eat(tc, options) {\n      let tk = hd();\n      if (tk !== tc) {\n        let expected = String.fromCharCode(tc);\n        let found = tk ? String.fromCharCode(tk) : \"EOS\";\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1001, [expected, found]));\n      }\n      next(options);\n    }\n    // Begin parsing functions.\n    function isSimpleFraction(node) {\n      if (node.op === Model.FRAC) {\n        let n0 = node.args[0];\n        let n1 = node.args[1];\n        return (\n          n0.op === Model.NUM && n0.numberFormat === \"integer\" &&\n          n1.op === Model.NUM && n1.numberFormat === \"integer\"\n        );\n      }\n      return false;\n    }\n    function isProperFraction(node) {\n      if (node.op === Model.FRAC) {\n        let n0 = node.args[0];\n        let n1 = node.args[1];\n        return (\n          n0.op === Model.NUM && n0.numberFormat === \"integer\" &&\n          n1.op === Model.NUM && n1.numberFormat === \"integer\" &&\n          +n0.args[0] < n1.args[0]\n        );\n      }\n      return false;\n    }\n    function foldUnit(n, u) {\n      if (n.op === Model.POW) {\n        // Bind unit to base of power.\n        let b = n.args[0];\n        let e = n.args[1];\n        return binaryNode(Model.POW, [binaryNode(Model.MUL, [b, u]), e]);\n      } else if (n.op === Model.FRAC && n.isSlash) {\n        // Bind unit to denominator.\n        let nu = n.args[0];\n        let d = n.args[1];\n        return binaryNode(Model.FRAC, [nu, binaryNode(Model.MUL, [d, u])]);\n      }\n      return binaryNode(Model.MUL, [n, u]);\n    }\n    function isUnit(node) {\n      let env = Model.env;\n      if (node.op === Model.POW) {\n        return isInteger(node.args[1]) && isUnit(node.args[0]);\n      }\n      return (\n        node.op === Model.VAR &&\n        node.args.length === 1 &&\n        env[node.args[0]] &&\n        env[node.args[0]].type === \"unit\"\n      );\n    }\n    function primaryExpr() {\n      let t, node, tk, op, base, args = [], expr1, expr2;\n      switch ((tk = hd())) {\n      case TK_CONST:\n      case TK_VAR:\n        args = [lexeme(options)];\n        next();\n        // // Collect the subscript if there is one. Subscripts make multipart variable names.\n        // if ((t=hd())===TK_UNDERSCORE) {\n        //   next({oneCharToken: true});\n        //   args.push(primaryExpr());   // {op:VAR, args:[\"Fe\", \"2\"]}\n        // }\n        node = newNode(Model.VAR, args);\n        if (isChemCore()) {\n          if (hd() === TK_LEFTBRACE && lookahead() === TK_RIGHTBRACE) {\n            // C_2{}^3 -> C_2^3\n            eat(TK_LEFTBRACE);\n            eat(TK_RIGHTBRACE);\n          }\n        }\n        break;\n      case TK_NUM:\n        node = numberNode(lexeme(options));\n        next();\n        break;\n      case TK_LEFTCMD:   // \\left .. \\right\n        if (lookahead() === TK_LEFTBRACE ||\n            lookahead() === TK_LEFTBRACESET) {\n          node = braceExpr(tk, true);\n        } else if (lookahead() === TK_VERTICALBAR) {\n          node = absExpr(tk);\n        } else {\n          node = parenExpr(tk);\n        }\n        break;\n      case TK_TYPE:\n        node = newNode(Model.TYPE, [newNode(Model.VAR, [lexeme(options)])]);\n        next();\n        break;\n      case TK_LEFTBRACKET:\n      case TK_LEFTPAREN:\n        node = parenExpr(tk);\n        break;\n      case TK_RIGHTBRACKET:\n        if (Model.option(options, \"allowInterval\") && !inParenExpr) {\n          // French style intervals: ][, ]].\n          node = parenExpr(tk);\n        } else {\n          node = nodeEmpty;\n        }\n        break;\n      case TK_LEFTBRACE:\n        node = braceExpr(tk, true);\n        break;\n      case TK_LEFTBRACESET:\n        node = braceExpr(tk, true);\n        break;\n      case TK_BEGIN:\n        next();\n        let figure = braceExpr();\n        if (figure.op === Model.VAR) {\n          if (Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(figure.args[0], \"array\") === 0) {\n            if (hd() === TK_LEFTBRACE) {\n              while (hd() !== TK_RIGHTBRACE) {\n                next();  // Eat column alignment header.\n              }\n              next();\n            }\n          } else if (Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(figure.args[0], \"matrix\") >= 0) {\n            if (hd() === TK_LEFTBRACKET) {\n              while (hd() !== TK_RIGHTBRACKET) {\n                next();  // Eat column alignment header.\n              }\n              next();\n            }\n          }\n        }\n        let tbl = matrixExpr();\n        eat(TK_END);\n        braceExpr();\n        if (Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(figure.args[0], \"matrix\") >= 0 || Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(figure.args[0], \"array\") === 0) {\n          node = newNode(Model.MATRIX, [tbl]);\n        } else {\n          Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, \"1000: Unrecognized LaTeX name\");\n        }\n        break;\n      case TK_VERTICALBAR:\n        node = absExpr();\n        break;\n      case TK_ABS:\n        next();\n        node = unaryNode(Model.ABS, [braceExpr()]);\n        break;\n      case TK_FRAC:\n        next();\n        expr1 = braceExpr();\n        expr2 = braceExpr();\n        expr1 = expr1.args.length === 0 ? newNode(Model.COMMA, [nodeNone]) : expr1;\n        expr2 = expr1.args.length === 0 ? newNode(Model.COMMA, [nodeNone]) : expr2;\n        node = newNode(Model.FRAC, [expr1, expr2]);\n        node.isFraction = isSimpleFraction(node);\n        break;\n      case TK_BINOM:\n        next();\n        let n = braceExpr();\n        let k = braceExpr();\n        // (n k) = \\frac{n!}{k!(n-k)!}\n        let num = unaryNode(Model.FACT, [n]);\n        let den = binaryNode(Model.POW, [\n          binaryNode(Model.MUL, [\n            unaryNode(Model.FACT, [k]),\n            unaryNode(Model.FACT, [binaryNode(Model.ADD, [n, negate(k)])])\n          ]),\n          nodeMinusOne\n        ]);\n        node = binaryNode(Model.MUL, [num, den]);\n        node.isBinomial = true;\n        break;\n      case TK_SQRT:\n        next();\n        switch(hd()) {\n        case TK_LEFTBRACKET:\n          let root = bracketExpr();\n          base = braceExpr();\n          node = newNode(Model.SQRT, [base, root]);\n          break;\n        case TK_LEFTBRACE:\n          base = braceExpr();\n          node = newNode(Model.SQRT, [base, newNode(Model.NUM, [\"2\"])]);\n          break;\n        default:\n          Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1001, [\"{ or (\", String.fromCharCode(hd())]));\n          break;\n        }\n        break;\n      case TK_VEC:\n        next();\n        let name = braceExpr();\n        node = newNode(Model.VEC, [name]);\n        break;\n      case TK_OPERATORNAME:\n        let lex = lexeme(options);\n        next();\n        node = newNode(Model.OPERATORNAME, [newNode(Model.VAR, [lex]), primaryExpr()]);\n        break;\n      case TK_SIN:\n      case TK_COS:\n      case TK_TAN:\n      case TK_SEC:\n      case TK_COT:\n      case TK_CSC:\n      case TK_SINH:\n      case TK_COSH:\n      case TK_TANH:\n      case TK_SECH:\n      case TK_COTH:\n      case TK_CSCH:\n        next();\n        // Collect exponents if there are any\n        while ((t=hd())===TK_CARET) {\n          next({oneCharToken: true});\n          args.push(unaryExpr());\n        }\n        if (args.length === 1 && isMinusOne(args[0])) {\n          // Special case for sin^{-1} and friends.\n          op = \"arc\" + tokenToOperator[tk];\n        } else {\n          op = tokenToOperator[tk];\n        }\n        args.unshift(newNode(op, [postfixExpr()]));\n        if (args.length > 1) {\n          return newNode(Model.POW, args);\n        } else {\n          return args[0];\n        }\n        break;\n      case TK_ARCSIN:\n      case TK_ARCCOS:\n      case TK_ARCTAN:\n      case TK_ARCSEC:\n      case TK_ARCCSC:\n      case TK_ARCCOT:\n      case TK_ARCSINH:\n      case TK_ARCCOSH:\n      case TK_ARCTANH:\n      case TK_ARCSECH:\n      case TK_ARCCSCH:\n      case TK_ARCCOTH:\n        next();\n        // Collect exponents if there are any\n        while ((t=hd())===TK_CARET) {\n          next({oneCharToken: true});\n          args.push(unaryExpr());\n        }\n        args.unshift(newNode(tokenToOperator[tk], [primaryExpr()]));\n        if (args.length > 1) {\n          return newNode(Model.POW, args);\n        } else {\n          return args[0];\n        }\n        break;\n      case TK_LN:\n        next();\n        return newNode(Model.LOG, [newNode(Model.VAR, [\"e\"]), primaryExpr()]);\n      case TK_LG:\n        next();\n        return newNode(Model.LOG, [newNode(Model.NUM, [\"10\"]), primaryExpr()]);\n      case TK_LOG:\n        next();\n        // Collect the subscript if there is one\n        if ((t=hd())===TK_UNDERSCORE) {\n          next({oneCharToken:true});\n          args.push(primaryExpr());\n        } else {\n          args.push(newNode(Model.NUM, [\"10\"]));    // Default to base 10.\n        }\n        args.push(primaryExpr());\n        // Finish the log function.\n        return newNode(Model.LOG, args);\n        break;\n      case TK_LIM:\n        return limitExpr();\n      case TK_INT:\n        return integralExpr();\n      case TK_SUM:\n      case TK_PROD:\n      case TK_CUP:\n      case TK_BIGCUP:\n      case TK_CAP:\n      case TK_BIGCAP:\n        next();\n        // Collect the subscript and expression.\n        if (hd() === TK_UNDERSCORE) {\n          next({oneCharToken: true});\n          args.push(primaryExpr());\n          if (hd() === TK_CARET) {\n            eat(TK_CARET, {oneCharToken: true});\n            args.push(primaryExpr());\n          }\n        }\n        args.push(commaExpr());\n        return newNode(tokenToOperator[tk], args);\n      case TK_EXISTS:\n        next();\n        return newNode(Model.EXISTS, [equalExpr()]);\n      case TK_FORALL:\n      case TK_CAPRIGHTARROW:\n      case TK_RIGHTARROW:\n      case TK_LEFTARROW:\n      case TK_LONGRIGHTARROW:\n      case TK_LONGLEFTARROW:\n      case TK_OVERRIGHTARROW:\n      case TK_OVERLEFTARROW:\n      case TK_CAPLEFTRIGHTARROW:\n      case TK_LEFTRIGHTARROW:\n      case TK_LONGLEFTRIGHTARROW:\n      case TK_OVERLEFTRIGHTARROW:\n        next();\n        return newNode(tokenToOperator[tk], [commaExpr()]);\n      case TK_EXP:\n        next();\n        return newNode(Model.EXP, [additiveExpr()]);\n      case TK_M:\n        next();\n        return newNode(Model.M, [multiplicativeExpr()]);\n      case TK_FORMAT:\n        next();\n        return newNode(Model.FORMAT, [braceExpr()]);\n      case TK_OVERLINE:\n        next();\n        return newNode(Model.OVERLINE, [braceExpr()]);\n      case TK_DOT:\n      case TK_MATHFIELD:\n        next();\n        return newNode(tokenToOperator[tk], [braceExpr()]);\n      case TK_OVERSET:\n      case TK_UNDERSET:\n        next();\n        expr1 = braceExpr();\n        expr2 = braceExpr();\n        // Add the annotation to the variable.\n        expr2.args.push(newNode(tokenToOperator[tk], [expr1]));\n        return expr2;\n      case TK_MATHBF:\n        // Erase this token.\n        next();\n        expr1 = braceExpr();\n        return newNode(Model.MATHBF, [expr1]);\n      case TK_QMARK:\n        next();\n        return newNode(Model.VAR, [\"?\"]);\n      case TK_DELTA:\n        next();\n        if (hd() === TK_VAR) {\n          let name = lexeme(options);\n          next();\n          return newNode(Model.VAR, [\"delta_\" + name]);\n        }\n        break;\n      case TK_PERIOD:\n        next();\n        return nodeEmpty;\n      default:\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(!Model.option(options, \"strict\"), message(1006, [tk]));\n        node = nodeEmpty;\n        break;\n      }\n      return node;\n    }\n    // Parse '1 & 2 & 3 \\\\ a & b & c'\n    function matrixExpr( ) {\n      let args = [];\n      let node, t;\n      args.push(rowExpr());\n      while ((t = hd()) === TK_NEWROW) {\n        next();\n        args.push(rowExpr());\n      }\n      return newNode(tokenToOperator[TK_NEWROW], args);\n    }\n    // Parse '1 & 2 & 3'\n    function rowExpr( ) {\n      let args = [];\n      let t;\n      args.push(equalExpr());\n      while ((t = hd()) === TK_NEWCOL) {\n        next();\n        args.push(equalExpr());\n      }\n      return newNode(tokenToOperator[TK_NEWCOL], args);\n    }\n    // Parse '| expr |'\n    let pipeTokenCount = 0;\n    function absExpr(tk) {\n      tk = tk || TK_VERTICALBAR;\n      pipeTokenCount++;\n      eat(tk);\n      let tk1, tk2;\n      if (tk === TK_LEFTCMD) {\n        eat((tk1 = hd())); // Capture left token.\n      } else {\n        tk1 = tk;\n      }\n      let e = additiveExpr();\n      eat((tk2 = tk === TK_LEFTCMD && TK_RIGHTCMD || tk1));\n      if (tk2 === TK_RIGHTCMD) {\n        eat((tk2 = tk1)); // Capture right token.\n      }\n      pipeTokenCount--;\n      return unaryNode(Model.ABS, [e]);\n    }\n    // Parse '{ expr }'\n    function braceExpr(tk, allowSet) {\n      tk = tk || TK_LEFTBRACE;\n      eat(tk);\n      let tk1, tk2;\n      let isSet = false;\n      let op;\n      if (tk === TK_LEFTCMD) {\n        eat((tk1 = hd() === TK_LEFTBRACESET && TK_LEFTBRACESET || TK_LEFTBRACE));\n      } else {\n        tk1 = tk;\n      }\n      if (tk1 === TK_LEFTBRACESET && allowSet) {\n        isSet = true;\n      }\n      let e;\n      if (hd() === TK_RIGHTCMD || hd() === TK_RIGHTBRACE || hd() === TK_RIGHTBRACESET) {\n        eat((tk2 = hd()));\n        if (tk2 === TK_RIGHTCMD) {\n          eat((tk2 = hd() === TK_PERIOD && TK_PERIOD ||\n               hd() === TK_RIGHTBRACESET && TK_RIGHTBRACESET ||\n               TK_RIGHTBRACE));\n        }\n        e = newNode(Model.COMMA, []);\n      } else {\n        e = commaExpr();\n        eat((tk2 = tk === TK_LEFTCMD && TK_RIGHTCMD ||\n             tk === TK_LEFTBRACESET && TK_RIGHTBRACESET ||\n             TK_RIGHTBRACE));\n        if (tk2 === TK_RIGHTCMD) {\n          eat((tk2 = hd() === TK_PERIOD && TK_PERIOD ||\n               hd() === TK_RIGHTBRACESET && TK_RIGHTBRACESET ||\n               TK_RIGHTBRACE));\n        }\n        if (e.op === nodeEmpty.op && e.args[0] === nodeEmpty.args[0]) {\n          // We've got empty braces.\n          e = newNode(Model.COMMA, []);\n        }\n      }\n      e.lbrk = tk1;\n      e.rbrk = tk2;\n      if (isSet) {\n        e = newNode(Model.SET, [e]);\n      }\n      return e;\n    }\n    // Parse '[ expr ]'\n    let bracketTokenCount = 0;\n    function bracketExpr(tk) {\n      tk = tk || TK_LEFTBRACKET;\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(tk === TK_LEFTCMD || tk === TK_LEFTBRACKET, \"1000: Internal error\");\n      bracketTokenCount++;\n      eat(tk);\n      let tk1, tk2;\n      if (tk === TK_LEFTCMD) {\n        eat((tk1 = TK_LEFTBRACKET)); // Capture left token.\n      } else {\n        tk1 = tk;\n      }\n      let e = commaExpr();\n      eat((tk2 = tk === TK_LEFTCMD && TK_LEFTCMD || TK_RIGHTBRACKET));\n      if (tk2 === TK_RIGHTCMD) {\n        eat((tk2 = TK_RIGHTBRACKET)); // Capture right token.\n      }\n      bracketTokenCount--;\n      return e;\n    }\n    // Parse '( expr )' and '( expr ]' and '[ expr )' and '[ expr ]'\n    //       '\\left . expr \\right |_3', '\\left( expr \\right)'\n    let inParenExpr;\n    function parenExpr(tk) {\n      // Handle grouping and intervals.\n      let allowInterval = Model.option(options, \"allowInterval\");\n      bracketTokenCount++;\n      eat(tk);\n      let tk1, tk2;\n      if (tk === TK_LEFTCMD) {\n        eat((tk1 = hd())); // Capture left token.\n      } else {\n        tk1 = tk;\n      }\n      let e;\n      if (hd() === TK_RIGHTCMD || hd() === TK_RIGHTPAREN || hd() === TK_RIGHTBRACKET) {\n        eat((tk2 = hd()));\n        if (tk2 === TK_RIGHTCMD) {\n          eat((tk2 = tk1 === TK_LEFTPAREN && TK_RIGHTPAREN || TK_RIGHTBRACKET));\n        }\n        // We have an empty list.\n        e = newNode(Model.COMMA, []);\n      } else {\n        inParenExpr = true;\n        let allowSemicolon = allowInterval; // Allow semis if in an interval.\n        e = commaExpr(allowSemicolon);\n        if (allowInterval) {\n          // (..], [..], [..), (..), ]..], ]..[, [..[\n          eat((tk2 = hd() === TK_RIGHTPAREN && TK_RIGHTPAREN ||\n                     tk === TK_LEFTCMD && TK_RIGHTCMD ||\n                     hd() === TK_LEFTBRACKET && TK_LEFTBRACKET ||\n                     TK_RIGHTBRACKET));\n          if (tk2 === TK_RIGHTCMD) {\n            eat((tk2 = hd() === TK_RIGHTPAREN && TK_RIGHTPAREN ||\n                       hd() === TK_LEFTBRACKET && TK_LEFTBRACKET ||\n                       TK_RIGHTBRACKET)); // Capture right token.\n          }\n        } else {\n          // (..), [..], \\left .. \\right\n          eat((tk2 = tk === TK_LEFTPAREN && TK_RIGHTPAREN ||\n                     tk === TK_LEFTCMD && TK_RIGHTCMD ||\n                     TK_RIGHTBRACKET));\n          if (tk2 === TK_RIGHTCMD) {\n            eat((tk2 = tk1 === TK_LEFTPAREN && TK_RIGHTPAREN ||\n                       tk1 === TK_PERIOD && TK_VERTICALBAR ||\n                       tk1 === TK_LEFTBRACKET && TK_RIGHTBRACKET ||\n                       hd())); // Capture right token.\n          }\n        }\n      }\n      // Save the brackets as attributes on the node for later use. Normalize\n      // French style brackets.\n      e.lbrk = tk1 = tk1 === TK_RIGHTBRACKET ? TK_LEFTPAREN : tk1;\n      e.rbrk = tk2 = tk2 === TK_LEFTBRACKET ? TK_RIGHTPAREN : tk2;\n      // intervals: (1, 3), [1, 3], [1, 3), (1, 3]\n      if (allowInterval && e.op === Model.COMMA && e.args.length === 2 &&\n          (tk1 === TK_LEFTPAREN || tk1 === TK_LEFTBRACKET || tk1 === TK_RIGHTBRACKET) &&\n          (tk2 === TK_RIGHTPAREN || tk2 === TK_RIGHTBRACKET || tk2 === TK_LEFTBRACKET)) {\n        let op =\n            tk1 === TK_LEFTBRACKET && tk2 === TK_RIGHTBRACKET && Model.INTERVAL ||\n            tk1 === TK_LEFTPAREN && tk2 === TK_RIGHTPAREN && Model.INTERVALOPEN ||\n            tk1 === TK_LEFTPAREN && tk2 === TK_RIGHTBRACKET && Model.INTERVALLEFTOPEN ||\n            tk1 === TK_LEFTBRACKET && tk2 === TK_RIGHTPAREN && Model.INTERVALRIGHTOPEN;\n        e = newNode(op, [e]);\n      } else if (e.lbrk === TK_PERIOD && e.rbrk === TK_VERTICALBAR) {\n        e = newNode(Model.EVALAT, [e]);\n      } else if (e.op === Model.COMMA || tk1 === TK_LEFTPAREN || tk1 === TK_LEFTBRACKET) {\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(tk1 === TK_LEFTPAREN && tk2 === TK_RIGHTPAREN ||\n               tk1 === TK_LEFTBRACKET && tk2 === TK_RIGHTBRACKET ||\n               tk1 === tk2, message(1011, [\"tk1=\" + tk1 + \" tk2=\" + tk2]));\n        e = newNode(Model.PAREN, [e]);\n      }\n      bracketTokenCount--;\n      inParenExpr = false;\n      e.lbrk = tk1;\n      e.rbrk = tk2;\n      return e;\n    }\n    // Parse 'x^2'\n    function exponentialExpr() {\n      let t, args = [primaryExpr()];\n      while ((t=hd())===TK_CARET) {\n        next({oneCharToken: true});\n        let t;\n        if ((isMathSymbol(args[0]) || isChemCore()) &&\n            ((t = hd()) === TK_ADD || t === TK_SUB)) {\n          next();\n          // Na^+\n          args.push(unaryNode(tokenToOperator[t], [nodeOne]));\n        } else {\n          let n = unaryExpr();\n          if (n.op === Model.VAR && n.args[0] === \"\\\\circ\") {\n            // 90^{\\circ} -> degree 90\n            if (hd() === TK_VAR &&\n                lexeme(options) === \"K\" || lexeme(options) === \"C\" || lexeme(options) === \"F\") {\n              n = multiplyNode([\n                args.pop(),\n                unaryNode(Model.VAR, [\"\\\\degree \" + lexeme(options)])]);\n              next();\n            } else {\n              n = multiplyNode([\n                args.pop(),\n                unaryNode(Model.VAR, [\"\\\\degree\"])\n              ]);\n            }\n            args.push(n);\n          } else {\n            // x^2\n            args.push(n);\n          }\n        }\n      }\n      if (args.length > 1) {\n        let expo = args.pop();\n        Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(args.reverse(), function (base) {\n          expo = newNode(Model.POW, [base, expo]);\n        });\n        expo.isPolynomial = isPolynomial(expo);\n        return expo;\n      } else {\n        let node = args[0];\n        node.isPolynomial = isPolynomial(node);\n        return node;\n      }\n    }\n    // Parse '10%', '4!'\n    function postfixExpr() {\n      let t;\n      let expr = exponentialExpr();\n      switch (t = hd()) {\n      case TK_PERCENT:\n        next();\n        expr = newNode(Model.PERCENT, [expr]);\n        break;\n      case TK_BANG:\n        next();\n        expr = newNode(Model.FACT, [expr]);\n        break;\n      default:\n        if (t === TK_VAR && lexeme(options) === \"\\\\degree\") {\n          next();\n          if (hd() === TK_VAR && (lexeme(options) === \"K\" || lexeme(options) === \"C\" || lexeme(options) === \"F\")) {\n            expr = multiplyNode([\n              expr,\n              unaryNode(Model.VAR, [\"\\\\degree \" + lexeme(options)])]);\n            next();\n          } else {\n            expr = multiplyNode([\n              expr,\n              unaryNode(Model.VAR, [\"\\\\degree\"])\n            ]);\n          }\n        } else if (t === TK_VERTICALBAR && lookahead() === TK_UNDERSCORE) {\n          // x|_{x=3}, x|_1^2\n          next();\n          let args = [expr];\n          next({oneCharToken: true});\n          args.push(newNode(Model.SUBSCRIPT, [equalExpr()]));\n          expr = newNode(Model.PIPE, args);\n        } else if (isChemCore() && (t === TK_ADD || t === TK_SUB) && lookahead() === TK_RIGHTBRACE) {\n          next();\n          // 3+, ion\n          expr = unaryNode(tokenToOperator[t], [expr]);\n        } // Otherwise we're in the middle of a binary expr.\n        break;\n      }\n      return expr;\n    }\n    function isEndOfMultiplicativeExpression(tk) {\n      return tk === TK_ADD ||\n        tk === TK_SUB ||\n        tk === TK_COMMA ||\n        tk === TK_RIGHTBRACE ||\n        tk === TK_RIGHTPAREN ||\n        tk === TK_RIGHTBRACKET ||\n        tk === TK_RIGHTCMD ||\n        tk === TK_NONE;\n    }\n    // Parse '+x', '\\pm y'\n    function unaryExpr() {\n      let t, expr, op;\n      switch (t = hd()) {\n      case TK_ADD:\n      case TK_NOT:\n      case TK_SUB:\n        next();\n        expr = newNode(tokenToOperator[t], [unaryExpr()]);\n        break;\n      case TK_PM:\n        next();\n        expr = unaryExpr();\n        expr = newNode(tokenToOperator[t], [expr]);\n        break;\n      case TK_UNDERSCORE:\n        // _1, _1^2, _+^-\n        op = tokenToOperator[t];\n        next({oneCharToken: true});\n        if ((t = hd()) === TK_ADD || t === TK_SUB) {\n          next();\n          // ^+, ^-\n          expr = nodeOne;\n        } else {\n          expr = unaryExpr();\n        }\n        expr = newNode(op, [expr]);\n        if ((t = hd()) === TK_CARET) {\n          let args = [expr];\n          // _1, _1^2, _+^-\n          op = tokenToOperator[t];\n          next({oneCharToken: true});\n          if ((t = hd()) === TK_ADD || t === TK_SUB) {\n            next();\n            // ^+, ^-\n            expr = nodeOne;\n          } else {\n            expr = unaryExpr();\n          }\n          args.push(expr);\n          expr = newNode(op, args);\n        }\n        break;\n      case TK_CARET:\n        op = tokenToOperator[t];\n        next({oneCharToken: true});\n        if ((t = hd()) === TK_ADD || t === TK_SUB) {\n          next();\n          // ^+, ^-\n          expr = nodeOne;\n        } else {\n          expr = unaryExpr();\n        }\n        expr = newNode(op, [expr]);\n        break;\n      default:\n        if (t === TK_VAR && lexeme(options) === \"$\") {\n          next();\n          if (!isEndOfMultiplicativeExpression(hd())) {\n            // Give $1 a higher precedence than ordinary multiplication.\n            expr = multiplyNode([newNode(Model.VAR, [\"$\"]), postfixExpr()]);\n            expr.args[1].isPolynomialTerm = true;\n          } else {\n            // Standalone \"$\". Probably not useful but we had a test case for it.\n            expr = newNode(Model.VAR, [\"$\"]);\n          }\n        } else {\n          expr = postfixExpr();\n        }\n        break;\n      }\n      return expr;\n    }\n    // Parse 'x_2'\n    function subscriptExpr() {\n      let t, args = [unaryExpr()];\n      if ((t=hd())===TK_UNDERSCORE) {\n        next({oneCharToken: true});\n        args.push(exponentialExpr());\n        if (isChemCore()) {\n          if (hd() === TK_LEFTBRACE) {\n            // C_2{}^3 -> C_2^3\n            eat(TK_LEFTBRACE);\n            eat(TK_RIGHTBRACE);\n          }\n        }\n      }\n      if (args.length > 1) {\n        return newNode(Model.SUBSCRIPT, args);\n      } else {\n        return args[0];\n      }\n    }\n    // Parse '1/2/3/4', '1 1/2', '1\\frac{1}{2}'\n    function fractionExpr() {\n      let t, node = subscriptExpr();\n      if (isNumber(node) && (hd() === TK_FRAC ||\n                             hd() === TK_NUM && lookahead() === TK_SLASH)) {\n        let frac = fractionExpr();\n        if (isMixedNumber(node, frac)) {\n          if (isNeg(node)) {\n            frac = binaryNode(Model.MUL, [nodeMinusOne, frac]);\n          }\n          node = binaryNode(Model.ADD, [node, frac]);\n          node.isMixedNumber = true;\n        } else {\n          node = binaryNode(Model.MUL, [node, frac]);\n          frac.isImplicit = true;\n        }\n      }\n      while ((t=hd())===TK_SLASH || t === TK_COLON) {\n        next();\n        node = newNode(tokenToOperator[t], [node, subscriptExpr()]);\n        node.isFraction = isSimpleFraction(node);\n        node.isSlash = t === TK_SLASH;\n      }\n      return node;\n    }\n    function isChemSymbol(n) {\n      let id;\n      if (n.op === Model.VAR) {\n        id = n.args[0];\n      } else if (n.op === Model.POW) {\n        id = n.args[0].args[0];\n      } else {\n        return false;\n      }\n      let sym = Model.env[id];\n      return sym && sym.mass ? true : false;  // Has mass so must be (?) a chem symbol.\n    }\n    function isMathSymbol(n) {\n      if (n.op !== Model.VAR) {\n        return false;\n      }\n      let sym = Model.env[n.args[0]];\n      return sym && sym.name ? true : false;  // This is somewhat ad hoc, update as needed.\n    }\n    function isVar(n, id) {\n      // Test if is a variable, possibly to an exponent.\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(typeof id === \"undefined\" || typeof id === \"string\", \"1000: Invalid id\");\n      if (n.op === Model.VAR) {\n        return id === undefined ? true : n.args[0] === id;\n      } else if (n.op === Model.POW && isVar(n.args[0]) && isInteger(n.args[1])) {\n        return id === undefined ? true : n.args[0].args[0] === id;\n      }\n      return false;\n    }\n    // Parse 'a \\times b', 'a * b'\n    function isOneOrMinusOne(node) {\n      return isOne(node) || isMinusOne(node);\n    }\n    function isOne(node) {\n      return node.op === Model.NUM && node.args[0] === \"1\"\n    }\n    function isMinusOne(node) {\n      return node.op === Model.SUB && node.args.length === 1 && isOne(node.args[0]);\n    }\n    function isMultiplicative(t) {\n      return t === TK_MUL ||\n        t === TK_DIV ||\n        t === TK_SLASH ||\n        t === TK_DOT;  // / is only multiplicative for parsing\n    }\n    function isDerivative(n) {\n      if (n.op !== Model.FRAC) {\n        return false;\n      }\n      let numer = n.args[0];\n      let numerHead =\n        numer.op === Model.MUL && numer.args[0].op === Model.VAR && numer.args[0].args[0] ||\n        numer.op === Model.VAR && numer.args[0] ||\n        numer.op === Model.POW && numer.args[0].op === Model.VAR && numer.args[0].args[0];\n      let denom = n.args[1];\n      let denomHead =\n        denom.op === Model.MUL && denom.args[0].op === Model.VAR && denom.args[0].args[0];\n      return numerHead === \"d\" && denomHead === \"d\" &&\n        (denom.args[1] && denom.args[1].op === Model.VAR ||\n         denom.args[1] && denom.args[1].op === Model.POW &&\n         denom.args[1].args[0] && denom.args[1].args[0].op === Model.VAR);\n    }\n    function derivativeExpr(node) {\n      if (node.op !== Model.FRAC) {\n        return;\n      }\n      let numer = node.args[0];\n      let denom = node.args[1];\n      let n =\n        numer.op === Model.MUL &&\n        numer.args.slice(1).length > 0 &&\n        multiplyNode(numer.args.slice(1)) || nodeOne;\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(denom.args.length === 2);\n      let arg = denom.args[1];\n      let sym = arg.op === Model.POW && arg.args[0] || arg;\n      let order = arg.op === Model.POW && arg.args[1] || nodeOne;\n      return newNode(Model.DERIV, [n, sym, order]);\n    }\n    function multiplicativeExpr() {\n      let t, expr, explicitOperator = false, prevExplicitOperator, isFraction, args = [];\n      let n0;\n      expr = fractionExpr();\n      if (isDerivative(expr)) {\n        expr = derivativeExpr(expr);\n      }\n      if (expr.op === Model.MUL &&\n          !expr.isBinomial &&\n          !Model.option(options, \"compareGrouping\") &&\n          expr.args[expr.args.length - 1].op !== Model.VAR &&\n          expr.args[expr.args.length - 1].args[0] === \"\\\\degree\") {\n        // FIXME binomials and all other significant syntax should not be desugared\n        // during parsing. It breaks equivLiteral and equivSyntax.\n        args = expr.args;\n      } else {\n        args = [expr];\n      }\n      // While lookahead is not a lower precedent operator\n      // FIXME need a better way to organize this condition\n      let loopCount = 0;\n      while((t = hd()) && !isAdditive(t) && !isRelational(t) && !isImplies(t) &&\n            t !== TK_COMMA && t !== TK_SEMICOLON && !isEquality(t) &&\n            t !== TK_RIGHTBRACE && t !== TK_RIGHTBRACESET && t !== TK_RIGHTPAREN &&\n            t !== TK_RIGHTCMD &&\n            !((t === TK_LEFTBRACKET || t === TK_RIGHTBRACKET) && bracketTokenCount > 0) &&\n            t !== TK_RIGHTARROW && t !== TK_CAPRIGHTARROW && t !== TK_LT &&\n            !(t === TK_VERTICALBAR && pipeTokenCount > 0) &&\n            t !== TK_NEWROW && t !== TK_NEWCOL && t !== TK_END) {\n        if (isDerivative(expr)) {\n          expr.isDerivative = true;\n        }\n        prevExplicitOperator = explicitOperator;  // In case we need to backup one operator.\n        explicitOperator = false;\n        if (isMultiplicative(t)) {\n          next();\n          explicitOperator = true;\n        }\n        expr = fractionExpr();\n        if (isDerivative(expr)) {\n          expr = derivativeExpr(expr);\n        }\n        if (t === TK_DIV || t === TK_DOT) {\n          expr = newNode(tokenToOperator[t], [args.pop(), expr]);\n        }\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(explicitOperator ||\n               args.length === 0 ||\n               expr.lbrk ||\n               args[args.length-1].op !== Model.NUM ||\n               args[args.length-1].lbrk ||\n               isRepeatingDecimal([args[args.length-1], expr]) ||\n               expr.op !== Model.NUM, message(1010));\n        if (isChemCore() && t === TK_LEFTPAREN && isVar(args[args.length-1], \"M\")) {\n          // M(x) -> \\M(x)\n          args.pop();\n          expr = unaryNode(Model.M, [expr]);\n        } else if (!explicitOperator) {\n          // Attempt to make units bind harder than multiplication. Reverted\n          // because of usability and compatibility issues.\n          if (args.length > 0 &&\n              isMixedNumber(args[args.length-1], expr)) {\n            // 3 \\frac{1}{2} -> 3 + \\frac{1}{2}\n            t = args.pop();\n            if (isNeg(t)) {\n              expr = binaryNode(Model.MUL, [nodeMinusOne, expr]);\n            }\n            expr = binaryNode(Model.ADD, [t, expr]);\n            expr.isMixedNumber = true;\n          } else if (args.length > 0 &&\n                     args[args.length-1].op === Model.VAR &&\n                     expr.op === Model.VAR && expr.args[0].indexOf(\"'\") === 0) {\n            // Merge previous var with current '.\n            expr = binaryNode(Model.POW, [args.pop(), expr]);\n            expr.isImplicit = expr.args[0].isImplicit;\n          } else if (args.length > 0 &&\n                     (args[args.length-1].op === Model.MUL || args[args.length-1].op === Model.DOT) &&  // 2x', 2*x', 2\\cdot x'\n                     args[args.length-1].args[args[args.length-1].args.length-1].op === Model.VAR &&\n                     expr.op === Model.VAR && expr.args[0].indexOf(\"'\") === 0) {\n            t = args.pop();\n            expr = multiplyNode(t.args.concat(binaryNode(Model.POW, [t.args.pop(), expr])));\n            expr.isImplicit = expr.args[0].isImplicit;\n          } else if (args.length > 0 &&\n                     args[args.length-1].op === Model.VAR &&\n                     expr.op === Model.POW &&\n                     expr.args[0].op === Model.VAR &&\n                     expr.args[0].args[0].indexOf(\"'\") === 0) {\n            // Merge previous var with current ' and raise to the power.\n            expr = newNode(Model.POW, [binaryNode(Model.POW, [args.pop(), expr.args[0]])].concat(expr.args.slice(1)));\n            expr.isImplicit = expr.args[0].args[0].isImplicit;\n          } else if (Model.option(options, \"ignoreCoefficientOne\") &&\n                     args.length === 1 && isOneOrMinusOne(args[0]) &&\n                     isPolynomialTerm(args[0], expr)) {\n            // 1x -> x\n            if (isOne(args[0])) {\n              args.pop();\n            } else {\n              expr = negate(expr);\n            }\n          } else if (args.length > 0 &&\n                     (n0 = isRepeatingDecimal([args[args.length-1], expr]))) {\n            args.pop();\n            expr = n0;\n          } else if (isENotation(args, expr)) {\n            // 1E2, 1E-2, 1e2\n            let tmp = args.pop();\n            expr = binaryNode(Model.POW, [numberNode(\"10\"), unaryExpr()]);\n            expr = binaryNode(Model.MUL, [tmp, expr]);\n            expr.isScientific = true;\n          } else if (!isChemCore() && isPolynomialTerm(args[args.length-1], expr)) {\n            // 2x, -3y but not CH (in chem)\n            expr.isPolynomialTerm = true;\n            let t = args.pop();\n            if (!t.isPolynomialTerm) {\n              if (t.op === Model.MUL && t.args[t.args.length-1].isPolynomialTerm) {\n                // FIXME group vars so ignoreOrder works.\n                Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(t.args.length === 2);\n                let prefix = t.args[0];\n                let suffix = t.args[1];\n                expr.isPolynomialTerm = suffix.isPolynomialTerm = false;\n                expr.isImplicit = true;\n                expr = binaryNode(Model.MUL, [prefix, binaryNode(Model.MUL, [suffix, expr], true)]);\n                expr.args[1].isPolynomialTerm = true;\n                expr.args[1].isImplicit = true;\n                // ...\n              } else {\n                expr = binaryNode(Model.MUL, [t, expr]);\n              }\n              expr.isImplicit = t.isImplicit;\n              t.isImplicit = undefined;\n            }\n          } else if (args[args.length - 1].op === Model.DERIV) {\n            // Fold expr into derivative expr.\n            let arg = args.pop();\n            let e = arg.args[0];\n            e = isOne(e) && expr || multiplyNode([e, expr]);\n            expr = newNode(Model.DERIV, [e].concat(arg.args.slice(1)));\n          } else {\n            // 2(x), (y+1)z\n            expr.isImplicit = true;\n          }\n        } else if (t === TK_MUL && args.length > 0 &&\n                   isScientific([args[args.length-1], expr])) {\n          // 1.2 \\times 10 ^ {-3}\n          t = args.pop();\n          if (isNeg(t)) {\n            expr = binaryNode(Model.MUL, [nodeMinusOne, expr]);\n          }\n          expr = binaryNode(Model.MUL, [t, expr]);\n          expr.isScientific = true;\n        }\n        if (expr.op === Model.MUL &&\n            !expr.isScientific &&\n            !expr.isBinomial && args.length &&\n            !args[args.length-1].isImplicit &&\n            !args[args.length-1].isPolynomialTerm &&\n            expr.isImplicit &&\n            expr.isPolynomialTerm) {\n          args = args.concat(expr.args);\n        } else {\n          args.push(expr);\n        }\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(loopCount++ < 1000, \"1000: Stuck in loop in multiplicativeExpr()\");\n      }\n      if (args.length > 1) {\n        return trimEmptyBraces(multiplyNode(args));\n      } else {\n        return args[0];\n      }\n    }\n    function trimEmptyBraces(node) {\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(node.op === Model.MUL, \"1000: Internal error\");\n      let args = node.args;\n      let n = args[0];\n      if (n.op === Model.COMMA && n.args.length === 0) {\n        args = args.slice(1, args.length);\n        args[0].isImplicit = false;\n      }\n      n = args[args.length - 1];\n      if (n.op === Model.COMMA && n.args.length === 0) {\n        args = args.slice(0, args.length - 1);\n      }\n      return newNode(node.op, args);\n    }\n    function isNumber(n) {\n      if ((n.op === Model.SUB || n.op === Model.ADD) &&\n          n.args.length === 1) {\n        n = n.args[0];\n      }\n      if (n.op === Model.NUM) {\n        return n;\n      }\n      return false;\n    }\n    function isMixedNumber(n0, n1) {\n      // 3\\frac{1}{2} but not 3(\\frac{1}{2}) or 3 1.0/2 or 3 3/2\n      if (n0.op === Model.SUB && n0.args.length === 1) {\n        n0 = n0.args[0];\n      }\n      if (!n0.lbrk && !n1.lbrk &&\n          n0.op === Model.NUM &&\n          isProperFraction(n1)) {\n        return true;\n      }\n      return false;\n    }\n\n    function isPolynomialTerm(n0, n1) {\n      // 3x but not 3(x)\n      if (n0.op === Model.SUB && n0.args.length === 1) {\n        n0 = n0.args[0];\n      }\n      if (!n0.lbrk && !n1.lbrk &&\n          (n0.op === Model.NUM && isVar(n1) ||\n           isVar(n0) && n1.op === Model.NUM ||\n           n0.op === Model.NUM && n1.op === Model.NUM ||\n           isVar(n0) && isVar(n1) ||\n           n0.op === Model.MUL && n0.args[n0.args.length-1].isPolynomialTerm &&\n           (isVar(n1) || n1.op === Model.NUM))) {\n        return true;\n      }\n      return false;\n    }\n\n    function isInteger(node) {\n      let mv;\n      if (!node) {\n        return false;\n      }\n      if (node.op === Model.SUB && node.args.length === 1) {\n        node = node.args[0];\n      }\n      if (node.op === Model.NUM &&\n          (mv = new decimal_js__WEBPACK_IMPORTED_MODULE_3__[\"Decimal\"](node.args[0])) &&\n          isInteger(mv)) {\n        return true;\n      } else if (node instanceof decimal_js__WEBPACK_IMPORTED_MODULE_3__[\"Decimal\"]) {\n        return node.modulo(bigOne).comparedTo(bigZero) === 0;\n      }\n      return false;\n    }\n\n    let bigZero = new decimal_js__WEBPACK_IMPORTED_MODULE_3__[\"Decimal\"](\"0\");\n    let bigOne = new decimal_js__WEBPACK_IMPORTED_MODULE_3__[\"Decimal\"](\"1\");\n\n    function isPolynomial(node) {\n      // This recognizes some common shapes of polynomials.\n      let degree = 0;\n      if (node.op === Model.POW) {\n        let base = node.args[0];\n        let expo = node.args[1];\n        if ((base.op === Model.VAR ||\n             base.isPolynomial ||\n             base.op === Model.PAREN &&\n             isPolynomial(base.args[0])) &&\n            isInteger(expo)) {\n          degree = parseInt(expo.args[0]);\n        }\n      } else if (node.op === Model.VAR) {\n        degree = 1;\n      } else if (node.op === Model.ADD || node.op === Model.SUB) {\n        node.args.forEach(n => {\n          let d = isPolynomial(n) ;\n          degree = d > degree && d || degree;\n        });\n      } else if (node.op === Model.MUL) {\n        node.args.forEach(n => {\n          let d = isPolynomial(n) ;\n          degree = d > degree && d || degree;\n        });\n      }\n      return degree;\n    }\n    function isRepeatingDecimal(args) {\n      // \"3.\" \"\\overline{..}\"\n      // \"3.\" \"(..)\"\n      // \"3.\" \"\\dot{..}\"\n      let expr, n0, n1;\n      // if (args[0].isRepeating) {\n      //   // We already have a repeating decimal so append additional digits to it.\n      //   let n = args[0].op === Model.ADD && args[0].args[1].op === Model.NUM\n      //     ? args[0].args[1]\n      //     : args[0];\n      //   console.log(\"isRepeating() n=\" + JSON.stringify(n, null, 2));\n      //   assert(n.op === Model.NUM || n.op === Model.VAR && n.args[0] === \"?\");\n      //   let arg1;\n      //   if (args[1].op === Model.DOT) {\n      //     assert(args[1].args[0].op === Model.NUM);\n      //     arg1 = numberNode(n.args[0] + args[1].args[0].args[0]);\n      //   } else {\n      //     assert(args[1].op === Model.NUM);\n      //     arg1 = numberNode(n.args[0] + args[1].args[0]);\n      //   }\n      //   arg1.isRepeating = true;\n      //   if (args[0].op === Model.ADD) {\n      //     args[0].args[1] = arg1;\n      //     expr = args[0];\n      //   } else {\n      //     expr = arg1;\n      //   }\n      // } else\n      if (!args[0].lbrk &&\n          (args[0].op === Model.NUM && args[0].numberFormat === \"decimal\" ||\n           args[0].op === Model.VAR && args[0].args[0] === \"?\" ||\n           args[0].op === Model.TYPE && args[0].args[0].op === Model.VAR && args[0].args[0].args[0] === \"decimal\")) {\n        // No lbrk so we are in the same number literal.\n        if (args[1].lbrk === 40 &&\n            (isInteger(args[1]) ||\n             args[1].op === Model.TYPE && args[1].args[0].op === Model.VAR && args[1].args[0].args[0] === \"integer\")) {\n          n0 = args[0];\n          n1 = args[1];\n        } else if (!args[1].lbrk && args[1].op === Model.OVERLINE) {\n          // 3.\\overline{12} --> 3.0+(0.12, repeating)\n          // 0.3\\overline{12} --> 0.3+0.1*(.12, repeating)\n          n0 = args[0];\n          n1 = args[1];\n          if (n1.args[0].op === Model.NUM) {\n            n1.args[0].args[0] = n1.args[0].args[0].split(\"\").join(\" \");\n          }\n        } else if (!args[1].lbrk && args[1].op === Model.DOT) {\n          // 3.\\dot{1}\\dot{2} --> 3.0+(0.12, repeating)\n          // 0.3\\overline{12} --> 0.3+0.1*(.12, repeating)\n          n0 = args[0];\n          n1 = args[1];\n        } else {\n          return null;\n        }\n        // n1 = numberNode(\".\" + n1.args[0]);\n        n1.isRepeating = true;\n        // if (indexOf(n0.args[0], \".\") >= 0) {\n        //   let decimalPlaces = n0.args[0].length - indexOf(n0.args[0], \".\")- 1;\n        //   n1 = multiplyNode([n1, binaryNode(Model.POW, [numberNode(\"10\"), numberNode(\"-\" + decimalPlaces)])]);\n        // }\n        // if (n0.op === Model.NUM && +n0.args[0] === 0) {\n        //   // 0.\\overline{..} or 0.00\\overline{..}. Leading zero, so don't add it.\n        //   expr = n1;\n        // } else {\n          expr = binaryNode(Model.ADD, [n0, n1]);\n        // }\n        expr.numberFormat = \"decimal\";\n        expr.isRepeating = true;\n      } else {\n        expr = null;\n      }\n      return expr;\n    }\n\n    function isENotation(args, expr, t) {\n      let n;\n      let eulers = Model.option(options, \"allowEulersNumber\");\n      if (args.length > 0 && isNumber(args[args.length-1]) &&\n          expr.op === Model.VAR &&\n          (expr.args[0] === \"E\" ||\n           expr.args[0] === \"e\" && !eulers) &&\n          (hd() === TK_NUM || (hd() === 45 || hd() === 43) && lookahead() === TK_NUM)) {\n        // 1E-2, 1E2\n        return true;\n      }\n      return false;\n    }\n\n    function isScientific(args) {\n      let n;\n      if (args.length === 1) {\n        // 1.2, 10^2\n        if ((n = isNumber(args[0])) &&\n            (n.args[0].length === 1 || Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(n.args[0], \".\") === 1)) {\n          return true;\n        } else if (args[0].op === Model.POW &&\n                   (n = isNumber(args[0].args[0])) && n.args[0] === \"10\" &&\n                   isInteger(args[0].args[1])) {\n          return true;\n        }\n        return false;\n      } else if (args.length === 2) {\n        // 1.0 \\times 10 ^ 1\n        let a = args[0];\n        let e = args[1];\n        if ((n = isNumber(a)) &&\n            (n.args[0].length === 1 || Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(n.args[0], \".\") === 1) &&\n            e.op === Model.POW &&\n            (n = isNumber(e.args[0])) && n.args[0] === \"10\" &&\n            isInteger(e.args[1])) {\n          return true;\n        }\n        return false;\n      }\n      return false;\n    }\n\n    function isNeg(n) {\n      if (typeof n === \"number\") {\n        return n < 0;\n      } else if (n.args.length===1) {\n        return n.op === OpStr.SUB && n.args[0].args[0] > 0 ||  // Is unary minus.\n               n.op === Model.NUM && +n.args[0] < 0;           // Is negative number.\n      } else if (n.args.length===2) {\n        return n.op===OpStr.MUL && isNeg(n.args[0]);  // Leading term is neg.\n      }\n      return false;\n    }\n    // Return the numeric inverse of the argument.\n    function negate(n) {\n      if (typeof n === \"number\") {\n        return -n;\n      } else if (n.op === Model.MUL) {\n        let args = n.args.slice(0); // Copy.\n        return multiplyNode([negate(args.shift())].concat(args));\n      } else if (n.op === Model.POW && isMinusOne(n.args[1])) {\n        return binaryNode(Model.POW, [negate(n.args[0]), nodeMinusOne]);\n      }\n      return unaryNode(Model.SUB, [n]);\n    }\n    function isAdditive(t) {\n      return (\n        t === TK_ADD || t === TK_SUB || t === TK_PM ||\n        t === TK_BACKSLASH || t === TK_CUP || t === TK_CAP\n      );\n    }\n    // Parse 'a + b'\n    function additiveExpr() {\n      let expr = multiplicativeExpr();\n      let t;\n      while (isAdditive(t = hd())) {\n        next();\n        let expr2 = multiplicativeExpr();\n        switch(t) {\n        case TK_BACKSLASH:\n        case TK_CUP:\n        case TK_CAP:\n          if (expr.lbrk === TK_LEFTBRACE &&\n              expr.rbrk === TK_RIGHTBRACE) {\n            expr = newNode(Model.SET, [expr]);\n          }\n          if (expr2.lbrk === TK_LEFTBRACE &&\n              expr2.rbrk === TK_RIGHTBRACE) {\n            expr2 = newNode(Model.SET, [expr2]);\n          }\n          expr = binaryNode(tokenToOperator[t], [expr, expr2]);\n          break;\n        case TK_PM:\n          expr = binaryNode(Model.PM, [expr, expr2]);\n          break;\n        case TK_SUB:\n          expr = binaryNode(Model.SUB, [expr, expr2]);\n          break;\n        default:\n          let flatten = !Model.option(options, \"compareGrouping\");\n          expr = binaryNode(Model.ADD, [expr, expr2], flatten);\n          break;\n        }\n      }\n      expr.isPolynomial = isPolynomial(expr);\n      return expr;\n    }\n    function flattenNestedNodes(node) {\n      let args = [];\n      if (node.op === Model.NUM || node.op === Model.VAR) {\n        return node;\n      }\n      Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(node.args, function (n) {\n        n = flattenNestedNodes(n);\n        if (n.op === node.op) {\n          args = args.concat(n.args);\n        } else {\n          args.push(n);\n        }\n      });\n      let isMixedNumber = node.isMixedNumber;\n      node = newNode(node.op, args);\n      node.isMixedNumber = isMixedNumber;\n      return node;\n    }\n    // Parse '\\int a + b dx'\n    function hasDX(node) {\n      let len = node.args.length;\n      if (node.op === Model.MUL && node.args[len - 1].op === Model.FRAC) {\n        node = node.args[len - 1].args[0];\n        len = node.args.length;\n      } else if (node.op === Model.FRAC) {\n        node = node.args[0];  // Numerator\n      }\n      let dvar = node.args[len - 2];\n      let ivar = node.args[len - 1];\n      return (\n        node && node.op === Model.MUL &&\n          dvar.op === Model.VAR && dvar.args[0] === \"d\" &&\n          ivar.op === Model.VAR && ivar || null\n      );\n    }\n    function stripDX(node) {\n      Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(node.op === Model.MUL || node.op === Model.FRAC);\n      // Strip off last two args ('dx')\n      let nodeLast = node.args[node.args.length - 1];\n      if (node.op === Model.MUL && nodeLast.op === Model.FRAC) {\n        // 2\\frac{dx}{x}\n        nodeLast = fractionNode(\n          multiplyNode(nodeLast.args.slice(0, nodeLast.args[0].args.length - 2)),\n          nodeLast.args[1]\n        );\n        node = multiplyNode(node.args.slice(0, node.args.length - 1).concat(nodeLast));\n      } else if (node.op === Model.FRAC) {\n        // \\frac{dx}{x}\n        node = fractionNode(\n          multiplyNode(node.args.slice(0, node.args[0].args.length - 2)),\n          node.args[1]\n        );\n      } else {\n        node = multiplyNode(node.args.slice(0, node.args.length - 2));\n      }\n      return node;\n    }\n    function integralExpr() {\n      eat(TK_INT);\n      let args = [];\n      // Collect the subscript and expression\n      if (hd() === TK_UNDERSCORE) {\n        next({oneCharToken: true});\n        args.push(primaryExpr());\n        if (hd() === TK_CARET) {\n          eat(TK_CARET, {oneCharToken: true});\n          args.push(primaryExpr());\n        }\n      }\n      let expr, foundDX;\n      if (hd() === TK_INT) {\n        // FIXME nested integrals are still broken.\n        expr = integralExpr();\n      } else {\n        expr = flattenNestedNodes(multiplicativeExpr());\n        let t;\n        foundDX = hasDX(expr);\n        expr = foundDX && stripDX(expr) || expr;\n        while (isAdditive(t = hd()) && !foundDX) {\n          next();\n          let expr2 = flattenNestedNodes(multiplicativeExpr());\n          foundDX = hasDX(expr2);\n          expr2 = foundDX && stripDX(expr2) || expr2;\n          switch(t) {\n          case TK_SUB:\n            expr = binaryNode(Model.SUB, [expr, expr2]);\n            break;\n          default:\n            expr = binaryNode(Model.ADD, [expr, expr2], true /*flatten*/);\n            break;\n          }\n        }\n      }\n      args.push(expr);\n      args.push(foundDX || nodeEmpty);\n      // [sub, sup,  expr, var], [expr, var]\n      return newNode(Model.INTEGRAL, args);\n    }\n    function limitExpr() {\n      eat(TK_LIM);\n      let args = [];\n      // Collect the subscript and expression\n      if (hd() === TK_UNDERSCORE) {\n        next({oneCharToken: true});\n        args.push(primaryExpr());\n      }\n      args.push(multiplicativeExpr());\n      return newNode(Model.LIM, args);\n    }\n    function isRelational(t) {\n      return t === TK_LT || t === TK_LE || t=== TK_GT || t === TK_GE ||\n        t === TK_NGTR || t === TK_NLESS ||\n        t === TK_IN || t === TK_TO || t === TK_COLON ||\n        t === TK_PERP || t === TK_PROPTO ||\n        t === TK_NI || t === TK_NOT ||\n        t === TK_SUBSETEQ || t === TK_SUPSETEQ ||\n        t === TK_SUBSET || t === TK_SUPSET ||\n        t === TK_PARALLEL || t === TK_NPARALLEL || t === TK_SIM || t === TK_CONG;\n    }\n    // Parse 'x < y'\n    // x + y > z ==> (x + y) > z, x + (y > z)\n    function relationalExpr() {\n      let t = hd();\n      let expr = additiveExpr();\n      let args = [];\n      let isNot = false;\n      while (isRelational(t = hd())) {\n        if (t === TK_TO) {\n          t = TK_COLON;\n        }\n        // x < y < z -> [x < y, y < z]\n        next();\n        if (t === TK_NOT) {\n          // Remember it and continue.\n          isNot = true;\n          continue;\n        }\n        let expr2 = additiveExpr();\n        expr = newNode(tokenToOperator[t], [expr, expr2]);\n        if (isNot) {\n          // Modify with not.\n          expr.op = \"n\" + expr.op; // Negate the operator: subset --> nsubset.\n          isNot = false;\n        }\n        args.push(expr);\n        // Make a copy of the reused node.\n        expr = Model.create(options, expr2);\n      }\n      if (args.length === 0) {\n        return expr;\n      } else if (args.length === 1) {\n        return args[0];\n      } else {\n        return newNode(Model.COMMA, args);\n      }\n    }\n    // Parse 'x = 10'\n    function isEquality(t) {\n      return t === TK_EQL || t === TK_NE || t === TK_APPROX;\n    }\n    function equalExpr() {\n      let expr = relationalExpr();\n      let t;\n      let args = [];\n      while (isEquality(t = hd()) || t === TK_RIGHTARROW) {\n        // x = y = z -> [x = y, y = z]\n        next();\n        let expr2 = additiveExpr();\n        expr = newNode(tokenToOperator[t], [expr, expr2]);\n        args.push(expr);\n        // Make a copy of the reused node.\n        expr = Model.create(options, expr2);\n      }\n      if (args.length === 0) {\n        return expr;\n      } else if (args.length === 1) {\n        return args[0];\n      } else {\n        return newNode(Model.COMMA, args);\n      }\n    }\n    function isImplies(t) {\n      return t === TK_IMPLIES || t === TK_RIGHTARROW || t === TK_CAPRIGHTARROW ||\n             t === TK_LEFTARROW || t === TK_LONGRIGHTARROW || t === TK_LONGLEFTARROW ||\n             t === TK_OVERRIGHTARROW || t === TK_OVERLEFTARROW || t === TK_CAPLEFTRIGHTARROW ||\n             t === TK_LEFTRIGHTARROW || t === TK_LONGLEFTRIGHTARROW || t === TK_OVERLEFTRIGHTARROW ||\n             t === TK_VERTICALBAR;\n    }\n    function impliesExpr() {\n      let expr = equalExpr();\n      let t;\n      let args = [];\n      while (isImplies(t = hd())) {\n        next();\n        let expr2 = equalExpr();\n        expr = newNode(tokenToOperator[t], [expr, expr2]);\n      }\n      return expr;\n    }\n    // Parse 'a, b, c, d'\n    function commaExpr(allowSemicolon) {\n      let expr = impliesExpr();\n      let args = [expr];\n      let t;\n      while ((t = hd())===TK_COMMA ||\n             allowSemicolon && t === TK_SEMICOLON) {\n        // If commas are thousands or decimal separator then they are already\n        // consumed as part of the number.\n        next();\n        if (!isListBreakToken(hd())) {\n          args.push(impliesExpr());\n        }\n      }\n      if (args.length > 1) {\n        return newNode(tokenToOperator[TK_COMMA], args);\n      } else {\n        return expr;\n      }\n    }\n    // Root syntax.\n    function tokenize() {\n      // Just return a list of lexemes.\n      let args = [];\n      start();\n      while (hd()) {\n        let lex = lexeme(options);\n        args.push(newNode(hd(), lex ? [lex] : []));\n        next();\n      }\n      let node = newNode(Model.COMMA, args);\n      return node;\n    }\n    function expr() {\n      try {\n        start();\n        if (hd()) {\n          let n = commaExpr();\n          Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(!hd(), message(1003, [scan.pos(), scan.lexeme(options), \"'\" + src.substring(scan.pos() - 1) + \"'\"]));\n          return n;\n        }\n      } catch (x) {\n        console.log(\"SYNTAX ERROR \" + x);\n      }\n      // No meaningful input. Return a dummy node to avoid choking.\n      return nodeNone;\n    }\n    // Return a parser object.\n    return {\n      expr: expr,\n      tokenize: tokenize,\n    };\n    // SCANNER\n    // Find tokens in the input stream.\n    function scanner(src) {\n      let curIndex = 0;\n      let lexeme = \"\";\n      let lexemeToToken = {\n        \"\\\\Delta\": TK_DELTA,\n        \"\\\\cdot\": TK_DOT,\n        \"\\\\times\": TK_MUL,\n        \"\\\\div\": TK_DIV,\n        \"\\\\dfrac\": TK_FRAC,\n        \"\\\\frac\": TK_FRAC,\n        \"\\\\sqrt\": TK_SQRT,\n        \"\\\\vec\": TK_VEC,\n        \"\\\\pm\": TK_PM,\n        \"\\\\not\": TK_NOT,\n        \"\\\\sin\": TK_SIN,\n        \"\\\\cos\": TK_COS,\n        \"\\\\tan\": TK_TAN,\n        \"\\\\sec\": TK_SEC,\n        \"\\\\cot\": TK_COT,\n        \"\\\\csc\": TK_CSC,\n        \"\\\\arcsin\": TK_ARCSIN,\n        \"\\\\arccos\": TK_ARCCOS,\n        \"\\\\arctan\": TK_ARCTAN,\n        \"\\\\arcsec\": TK_ARCSEC,\n        \"\\\\arccsc\": TK_ARCCSC,\n        \"\\\\arccot\": TK_ARCCOT,\n        \"\\\\asin\": TK_ARCSIN, // \\operatorname{asin}\n        \"\\\\acos\": TK_ARCCOS,\n        \"\\\\atan\": TK_ARCTAN,\n        \"\\\\asec\": TK_ARCSEC,\n        \"\\\\acsc\": TK_ARCCSC,\n        \"\\\\acot\": TK_ARCCOT,\n        \"\\\\sinh\": TK_SINH,\n        \"\\\\cosh\": TK_COSH,\n        \"\\\\tanh\": TK_TANH,\n        \"\\\\sech\": TK_SECH,\n        \"\\\\coth\": TK_COTH,\n        \"\\\\csch\": TK_CSCH,\n        \"\\\\arcsinh\": TK_ARCSINH,\n        \"\\\\arccosh\": TK_ARCCOSH,\n        \"\\\\arctanh\": TK_ARCTANH,\n        \"\\\\arcsech\": TK_ARCSECH,\n        \"\\\\arccsch\": TK_ARCCSCH,\n        \"\\\\arccoth\": TK_ARCCOTH,\n        \"\\\\ln\": TK_LN,\n        \"\\\\lg\": TK_LG,\n        \"\\\\log\": TK_LOG,\n        \"\\\\left\": TK_LEFTCMD,\n        \"\\\\right\": TK_RIGHTCMD,\n        \"\\\\big\": null,  // whitespace\n        \"\\\\Big\": null,\n        \"\\\\bigg\": null,\n        \"\\\\Bigg\": null,\n        \"\\\\ \": null,\n        \"\\\\quad\": null,\n        \"\\\\qquad\": null,\n        \"\\\\text\": TK_TEXT,\n        \"\\\\textrm\": TK_TEXT,\n        \"\\\\textit\": TK_TEXT,\n        \"\\\\textbf\": TK_TEXT,\n        \"\\\\operatorname\": TK_OPERATORNAME,\n        \"\\\\lt\": TK_LT,\n        \"\\\\le\": TK_LE,\n        \"\\\\leq\": TK_LE,\n        \"\\\\gt\": TK_GT,\n        \"\\\\ge\": TK_GE,\n        \"\\\\geq\": TK_GE,\n        \"\\\\ne\": TK_NE,\n        \"\\\\neq\": TK_NE,\n        \"\\\\ngtr\": TK_NGTR,\n        \"\\\\nless\": TK_NLESS,\n        \"\\\\ni\": TK_NI,\n        \"\\\\subseteq\": TK_SUBSETEQ,\n        \"\\\\supseteq\": TK_SUPSETEQ,\n        \"\\\\subset\": TK_SUBSET,\n        \"\\\\supset\": TK_SUPSET,\n        \"\\\\approx\": TK_APPROX,\n        \"\\\\implies\": TK_IMPLIES,\n        \"\\\\Rightarrow\": TK_CAPRIGHTARROW,\n        \"\\\\rightarrow\": TK_RIGHTARROW,\n        \"\\\\leftarrow\": TK_LEFTARROW,\n        \"\\\\longrightarrow\": TK_LONGRIGHTARROW,\n        \"\\\\longleftarrow\": TK_LONGLEFTARROW,\n        \"\\\\overrightarrow\": TK_OVERRIGHTARROW,\n        \"\\\\overleftarrow\": TK_OVERLEFTARROW,\n        \"\\\\Leftrightarrow\": TK_CAPLEFTRIGHTARROW,\n        \"\\\\leftrightarrow\": TK_LEFTRIGHTARROW,\n        \"\\\\longleftrightarrow\": TK_LONGLEFTRIGHTARROW,\n        \"\\\\overleftrightarrow\": TK_OVERLEFTRIGHTARROW,\n        \"\\\\perp\": TK_PERP,\n        \"\\\\propto\": TK_PROPTO,\n        \"\\\\parallel\": TK_PARALLEL,\n        \"\\\\nparallel\": TK_NPARALLEL,\n        \"\\\\sim\": TK_SIM,\n        \"\\\\cong\": TK_CONG,\n        \"\\\\exists\": TK_EXISTS,\n        \"\\\\in\": TK_IN,\n        \"\\\\forall\": TK_FORALL,\n        \"\\\\lim\": TK_LIM,\n        \"\\\\exp\": TK_EXP,\n        \"\\\\to\": TK_TO,\n        \"\\\\sum\": TK_SUM,\n        \"\\\\int\": TK_INT,\n        \"\\\\prod\": TK_PROD,\n        \"\\\\cup\": TK_CUP,\n        \"\\\\bigcup\": TK_BIGCUP,\n        \"\\\\cap\": TK_CAP,\n        \"\\\\bigcap\": TK_BIGCAP,\n        \"\\\\%\": TK_PERCENT,\n        \"\\\\binom\": TK_BINOM,\n        \"\\\\begin\": TK_BEGIN,\n        \"\\\\end\": TK_END,\n        \"\\\\colon\": TK_COLON,\n        \"\\\\vert\": TK_VERTICALBAR,\n        \"\\\\lvert\": TK_VERTICALBAR,\n        \"\\\\rvert\": TK_VERTICALBAR,\n        \"\\\\mid\": TK_VERTICALBAR,\n        \"\\\\type\": TK_TYPE,\n        \"\\\\format\": TK_FORMAT,\n        \"\\\\overline\": TK_OVERLINE,\n        \"\\\\overset\": TK_OVERSET,\n        \"\\\\underset\": TK_UNDERSET,\n        \"\\\\backslash\": TK_BACKSLASH,\n        \"\\\\mathbf\": TK_MATHBF,\n        \"\\\\abs\": TK_ABS,\n        \"\\\\dot\": TK_DOT,\n        \"\\\\MathQuillMathField\": TK_MATHFIELD,\n        \"\\\\ldots\": TK_VAR,  // ... and var are close syntactic alternatives\n        \"\\\\vdots\": TK_VAR,\n        \"\\\\ddots\": TK_VAR,\n      };\n      let unicodeToLaTeX = {\n        0x00B0: \"\\\\degree\",\n        0x2200: \"\\\\forall\",\n        0x2201: \"\\\\complement\",\n        0x2202: \"\\\\partial\",\n        0x2203: \"\\\\exists\",\n        0x2204: \"\\\\nexists\",\n        0x2205: \"\\\\varnothing\",\n        0x2206: \"\\\\triangle\",\n        0x2207: \"\\\\nabla\",\n        0x2208: \"\\\\in\",\n        0x2209: \"\\\\notin\",\n        0x220A: \"\\\\in\",\n        0x220B: \"\\\\ni\",\n        0x220C: \"\\\\notni\",\n        0x220D: \"\\\\ni\",\n        0x220E: \"\\\\blacksquare\",\n        0x220F: \"\\\\sqcap\",\n        0x2210: \"\\\\amalg\",\n        0x2211: \"\\\\sigma\",\n        0x2212: \"-\",\n        0x2213: \"\\\\mp\",\n        0x2214: \"\\\\dotplus\",\n        0x2215: \"/\",\n        0x2216: \"\\\\setminus\",\n        0x2217: \"*\",\n        0x2218: \"\\\\circ\",\n        0x2219: \"\\\\bullet\",\n        0x221A: \"\\\\sqrt\",\n        0x221B: null,\n        0x221C: null,\n        0x221D: \"\\\\propto\",\n        0x221E: \"\\\\infty\",\n        0x221F: \"\\\\llcorner\",\n        0x2220: \"\\\\angle\",\n        0x2221: \"\\\\measuredangle\",\n        0x2222: \"\\\\sphericalangle\",\n        0x2223: \"\\\\divides\",\n        0x2224: \"\\\\notdivides\",\n        0x2225: \"\\\\parallel\",\n        0x2226: \"\\\\nparallel\",\n        0x2227: \"\\\\wedge\",\n        0x2228: \"\\\\vee\",\n        0x2229: \"\\\\cap\",\n        0x222A: \"\\\\cup\",\n        0x222B: \"\\\\int\",\n        0x222C: \"\\\\iint\",\n        0x222D: \"\\\\iiint\",\n        0x222E: \"\\\\oint\",\n        0x222F: \"\\\\oiint\",\n        0x2230: \"\\\\oiiint\",\n        0x2231: null,\n        0x2232: null,\n        0x2233: null,\n        0x2234: \"\\\\therefore\",\n        0x2235: \"\\\\because\",\n        0x2236: \"\\\\colon\",\n        0x2237: null,\n        0x2238: null,\n        0x2239: null,\n        0x223A: null,\n        0x223B: null,\n        0x223C: \"\\\\sim\",\n        0x223D: \"\\\\backsim\",\n        0x223E: null,\n        0x223F: null,\n        0x2240: \"\\\\wr\",\n        0x2241: \"\\\\nsim\",\n        0x2242: \"\\\\eqsim\",\n        0x2243: \"\\\\simeq\",\n        0x2244: null,\n        0x2245: \"\\\\cong\",\n        0x2246: null,\n        0x2247: \"\\\\ncong\",\n        0x2248: \"\\\\approx\",\n        0x2249: null,\n        0x224A: \"\\\\approxeq\",\n        0x224B: null,\n        0x224C: null,\n        0x224D: \"\\\\asymp\",\n        0x224E: \"\\\\Bumpeq\",\n        0x224F: \"\\\\bumpeq\",\n        0x2250: \"\\\\doteq\",\n        0x2251: \"\\\\doteqdot\",\n        0x2252: \"\\\\fallingdotseq\",\n        0x2253: \"\\\\risingdotseq\",\n        0x2254: null,\n        0x2255: null,\n        0x2256: \"\\\\eqcirc\",\n        0x2257: \"\\\\circeq\",\n        0x2258: null,\n        0x2259: null,\n        0x225A: null,\n        0x225B: null,\n        0x225C: \"\\\\triangleq\",\n        0x225D: null,\n        0x225E: null,\n        0x225F: null,\n        0x2260: \"\\\\ne\",\n        0x2261: \"\\\\equiv\",\n        0x2262: null,\n        0x2263: null,\n        0x2264: \"\\\\le\",\n        0x2265: \"\\\\ge\",\n        0x2266: \"\\\\leqq\",\n        0x2267: \"\\\\geqq\",\n        0x2268: \"\\\\lneqq\",\n        0x2269: \"\\\\gneqq\",\n        0x226A: \"\\\\ll\",\n        0x226B: \"\\\\gg\",\n        0x226C: \"\\\\between\",\n        0x226D: null,\n        0x226E: \"\\\\nless\",\n        0x226F: \"\\\\ngtr\",\n        0x2270: \"\\\\nleq\",\n        0x2271: \"\\\\ngeq\",\n        0x2272: \"\\\\lessim\",\n        0x2273: \"\\\\gtrsim\",\n        0x2274: null,\n        0x2275: null,\n        0x2276: \"\\\\lessgtr\",\n        0x2277: \"\\\\gtrless\",\n        0x2278: null,\n        0x2279: null,\n        0x227A: \"\\\\prec\",\n        0x227B: \"\\\\succ\",\n        0x227C: \"\\\\preccurlyeq\",\n        0x227D: \"\\\\succcurlyeq\",\n        0x227E: \"\\\\precsim\",\n        0x227F: \"\\\\succsim\",\n        0x2280: \"\\\\nprec\",\n        0x2281: \"\\\\nsucc\",\n        0x2282: \"\\\\subset\",\n        0x2283: \"\\\\supset\",\n        0x2284: null,\n        0x2285: null,\n        0x2286: \"\\\\subseteq\",\n        0x2287: \"\\\\supseteq\",\n        0x2288: \"\\\\nsubseteq\",\n        0x2289: \"\\\\nsupseteq\",\n        0x228A: \"\\\\subsetneq\",\n        0x228B: \"\\\\supsetneq\",\n        0x228C: null,\n        0x228D: null,\n        0x228E: null,\n        0x228F: \"\\\\sqsubset\",\n        0x2290: \"\\\\sqsupset\",\n        0x2291: null,\n        0x2292: null,\n        0x2293: \"\\\\sqcap\",\n        0x2294: \"\\\\sqcup\",\n        0x2295: \"\\\\oplus\",\n        0x2296: \"\\\\ominus\",\n        0x2297: \"\\\\otimes\",\n        0x2298: \"\\\\oslash\",\n        0x2299: \"\\\\odot\",\n        0x229A: \"\\\\circledcirc\",\n        0x229B: \"\\\\circledast\",\n        0x229C: null,\n        0x229D: \"\\\\circleddash\",\n        0x229E: \"\\\\boxplus\",\n        0x229F: \"\\\\boxminus\",\n        0x22A0: \"\\\\boxtimes\",\n        0x22A1: \"\\\\boxdot\",\n        0x22A2: \"\\\\vdash\",\n        0x22A3: \"\\\\dashv\",\n        0x22A4: \"\\\\top\",\n        0x22A5: \"\\\\bot\",\n        0x22A6: null,\n        0x22A7: \"\\\\models\",\n        0x22A8: \"\\\\vDash\",\n        0x22A9: \"\\\\Vdash\",\n        0x22AA: \"\\\\Vvdash\",\n        0x22AB: \"\\\\VDash*\",\n        0x22AC: \"\\\\nvdash\",\n        0x22AD: \"\\\\nvDash\",\n        0x22AE: \"\\\\nVdash\",\n        0x22AF: \"\\\\nVDash\",\n        0x22B0: null,\n        0x22B1: null,\n        0x22B2: \"\\\\vartriangleleft\",\n        0x22B3: \"\\\\vartriangleright\",\n        0x22B4: \"\\\\trianglelefteq\",\n        0x22B5: \"\\\\trianglerighteq\",\n        0x22B6: null,\n        0x22B7: null,\n        0x22B8: \"\\\\multimap\",\n        0x22B9: null,\n        0x22BA: \"\\\\intercal\",\n        0x22BB: \"\\\\veebar\",\n        0x22BC: \"\\\\barwedge\",\n        0x22BD: null,\n        0x22BE: null,\n        0x22BF: null,\n        0x22C0: \"\\\\wedge\",\n        0x22C1: \"\\\\vee\",\n        0x22C2: \"\\\\cap\",\n        0x22C3: \"\\\\cup\",\n        0x22C4: \"\\\\diamond\",\n        0x22C5: \"\\\\cdot\",\n        0x22C6: \"\\\\star\",\n        0x22C7: null,\n        0x22C8: \"\\\\bowtie\",\n        0x22C9: \"\\\\ltimes\",\n        0x22CA: \"\\\\rtimes\",\n        0x22CB: \"\\\\leftthreetimes\",\n        0x22CC: \"\\\\rightthreetimes\",\n        0x22CD: \"\\\\backsimeq\",\n        0x22CE: \"\\\\curlyvee\",\n        0x22CF: \"\\\\curlywedge\",\n        0x22D0: \"\\\\Subset\",\n        0x22D1: \"\\\\Supset\",\n        0x22D2: \"\\\\Cap\",\n        0x22D3: \"\\\\Cup\",\n        0x22D4: \"\\\\pitchfork\",\n        0x22D5: \"\\\\lessdot\",\n        0x22D6: \"\\\\gtrdot\",\n        0x22D7: null,\n        0x22D8: \"\\\\lll\",\n        0x22D9: \"\\\\ggg\",\n        0x22DA: \"\\\\lesseqgtr\",\n        0x22DB: \"\\\\gtreqless\",\n        0x22DC: null,\n        0x22DD: null,\n        0x22DE: \"\\\\curlyeqprec\",\n        0x22DF: \"\\\\curlyeqsucc\",\n        0x22E0: null,\n        0x22E1: null,\n        0x22E2: null,\n        0x22E3: null,\n        0x22E4: null,\n        0x22E5: null,\n        0x22E6: \"\\\\lnsim\",\n        0x22E7: \"\\\\gnsim\",\n        0x22E8: \"\\\\precnsim\",\n        0x22E9: \"\\\\succnsim\",\n        0x22EA: \"\\\\ntriangleleft\",\n        0x22EB: \"\\\\ntriangleright\",\n        0x22EC: \"\\\\ntrianglelefteq\",\n        0x22ED: \"\\\\ntrianglerighteq\",\n        0x22EE: \"\\\\vdots\",\n        0x22EF: \"\\\\cdots\",\n        0x22F0: null,\n        0x22F1: \"\\\\ddots\",\n        0x22F2: null,\n        0x22F3: null,\n        0x22F4: null,\n        0x22F5: null,\n        0x22F6: null,\n        0x22F7: null,\n        0x22F8: null,\n        0x22F9: null,\n        0x22FA: null,\n        0x22FB: null,\n        0x22FC: null,\n        0x22FD: null,\n        0x22FE: null,\n        0x22FF: null,\n      };\n      let identifiers = Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"keys\"])(env);\n      // Add keywords to the list of identifiers.\n      identifiers.push(\"to\");\n      function isAlphaCharCode(c) {\n        return (\n          c >= 65 && c <= 90 ||\n          c >= 97 && c <= 122\n        );\n      }\n      // Start scanning for one token.\n      function start(options) {\n        if (!options) {\n          options = {};\n        }\n        let c;\n        lexeme = \"\";\n        let t;\n        while (curIndex < src.length) {\n          switch ((c = src.charCodeAt(curIndex++))) {\n          case 32:  // space\n          case 9:   // tab\n          case 10:  // new line\n          case 13:  // carriage return\n          case 0x00A0: // non-breaking space (&nbsp;)\n          case 0x200B: // zero width space\n            continue;\n          case 38:  // ampersand (new column or entity)\n            if (Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(src.substring(curIndex), \"nbsp;\") === 0) {\n              // Skip &nbsp;\n              curIndex += 5;\n              continue;\n            }\n            return TK_NEWCOL;\n          case 92:  // backslash\n            lexeme += String.fromCharCode(c);\n            switch (src.charCodeAt(curIndex)) {\n            case 92:\n              curIndex++;\n              return TK_NEWROW;   // double backslash = new row\n            case 123: // left brace\n              curIndex++;\n              return TK_LEFTBRACESET;\n            case 124: // vertical bar\n              curIndex++;\n              return TK_VERTICALBAR;\n            case 125: // right brace\n              curIndex++;\n              return TK_RIGHTBRACESET;\n            }\n            let tk = latex();\n            if (tk !== null) {\n              return tk;\n            }\n            lexeme = \"\";\n            continue;  // whitespace\n          case 42:  // asterisk\n          case 0x2217:\n            if (src.charCodeAt(curIndex) === 42) { // ** => ^\n              curIndex++;\n              return TK_CARET;\n            }\n            return TK_MUL;\n          case 45:  // dash\n          case 0x2212:  // unicode minus\n            if (src.charCodeAt(curIndex) === 62) {\n              curIndex++;\n              return TK_RIGHTARROW;\n            }\n            return TK_SUB;\n          case 47:  // slash\n          case 0x2215:\n            return TK_SLASH;\n          case 33:  // bang, exclamation point\n            if (src.charCodeAt(curIndex) === 61) { // equals\n              curIndex++;\n              return TK_NE;\n            }\n            return c; // char code is the token id\n          case 58:  // colon\n          case 0x2236:\n            return TK_COLON;\n          case 59:  // semicolon\n            return TK_SEMICOLON;\n          case 37:  // percent\n          case 40:  // left paren\n          case 41:  // right paren\n          case 42:  // asterisk\n          case 43:  // plus\n          case 44:  // comma\n          case 47:  // slash\n          case 58:  // colon\n          case 61:  // equal\n          case 63:  // question mark\n          case 91:  // left bracket\n          case 93:  // right bracket\n          case 94:  // caret\n          case 95:  // underscore\n          case 123: // left brace\n          case 124: // vertical bar\n          case 125: // right brace\n            lexeme += String.fromCharCode(c);\n            return c; // char code is the token id\n          case 36:  // dollar\n            lexeme += String.fromCharCode(c);\n            return TK_VAR;\n          case 39:  // prime (single quote)\n            return prime(c);\n          case 60:  // left angle\n            if (src.charCodeAt(curIndex) === 61) { // equals\n              curIndex++;\n              return TK_LE;\n            }\n            return TK_LT;\n          case 62:  // right angle\n            if (src.charCodeAt(curIndex) === 61) { // equals\n              curIndex++;\n              return TK_GE;\n            }\n            return TK_GT;\n          default:\n            if (isAlphaCharCode(c) ||\n                c === CC_SINGLEQUOTE) {\n              return variable(c);\n            } else if (t=unicodeToLaTeX[c]) {\n              lexeme = t;\n              let tk = lexemeToToken[lexeme];\n              if (tk === void 0) {\n                tk = TK_VAR;   // e.g. \\\\theta\n              }\n              return tk;\n            } else if (matchDecimalSeparator(String.fromCharCode(c)) ||\n                       isNumberCharCode(c)) {\n              if (options.oneCharToken) {\n                lexeme += String.fromCharCode(c);\n                return TK_NUM;\n              }\n              return number(c);\n            } else {\n              Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(false, message(1004, [String.fromCharCode(c), c]));\n              return 0;\n            }\n          }\n        }\n        return 0;\n      }\n      // Recognize 1, 1.2, 0.3, .3, 1\\ 234.00\n      let lastSeparator;\n      function number(c) {\n        while (isNumberCharCode(c) ||\n               matchDecimalSeparator(String.fromCharCode(c)) ||\n               (lastSeparator = matchThousandsSeparator(String.fromCharCode(c), lastSeparator)) &&\n               isNumberCharCode(src.charCodeAt(curIndex))) {\n          // Make sure the next char is a num.\n          lexeme += String.fromCharCode(c);\n          c = src.charCodeAt(curIndex++);\n          if (c === 92 && src.charCodeAt(curIndex) === 32) {\n            // We have a space as a decimal separator.\n            // Convert '\\ ' to ' '.\n            c = 32;\n            curIndex++;\n          }\n        }\n        if (lexeme === \".\" &&\n            (Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(src.substring(curIndex), \"overline\") === 0 ||\n             Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(src.substring(curIndex), \"dot\") === 0)) {\n          // .\\overline --> 0.\\overline\n          // .\\dot --> 0.\\dot\n          lexeme = \"0.\";\n        }\n        curIndex--;\n        if (lexeme === \".\") {\n          return TK_PERIOD;\n        }\n        return TK_NUM;\n      }\n      // Recognize x, cm, kg.\n      function variable(c) {\n        // Normal variables are a single character, but we treat units as\n        // variables too so we need to scan the whole unit string as a variable\n        // name.\n        var ch = String.fromCharCode(c);\n        lexeme += ch;\n        var identifier = lexeme;\n        var startIndex = curIndex + 1;\n        while (isAlphaCharCode(c) || c === CC_SINGLEQUOTE) {\n          // All single character names are valid variable lexemes. Now we check\n          // for longer match against unit names. The longest one wins.\n          c = src.charCodeAt(curIndex++);\n          if (!isAlphaCharCode(c)) {\n            // Past end of identifier.\n            break;\n          }\n          var ch = String.fromCharCode(c);\n          var match = Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"some\"])(identifiers, function (u) {\n            var ident = identifier + ch;\n            // Check of not an explicit variable and has a prefix that is a unit.\n            return Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(u, ident) === 0;\n          });\n          if (!match) {\n            // No match, so we know it is not a unit, so bail.\n            break;\n          }\n          identifier += ch;\n        }\n        if (Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(identifiers, identifier) >= 0) {\n          // Found an identifier, so make it the lexeme.\n          lexeme = identifier;\n        } else {\n          // Reset curIndex.\n          curIndex = startIndex;\n        }\n        // Group primes into a single var.\n        while (lexeme.lastIndexOf(\"'\") === lexeme.length - 1 && c === CC_SINGLEQUOTE) {\n          lexeme += String.fromCharCode(c);\n          c = src.charCodeAt(curIndex++);\n        }\n        curIndex--;\n        return TK_VAR;\n      }\n      function latex() {\n        let c = src.charCodeAt(curIndex++);\n        if (c === CC_DOLLAR) {\n          // don't include \\\n          lexeme = String.fromCharCode(c);\n        } else if (c === CC_PERCENT) {\n          lexeme += String.fromCharCode(c);\n        } else if (Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])([CC_SPACE,\n                            CC_COLON,\n                            CC_SEMICOLON,\n                            CC_COMMA,\n                            CC_BANG], c) >= 0) {\n          lexeme = \"\\\\ \";\n        } else {\n          while (isAlphaCharCode(c)) {\n            lexeme += String.fromCharCode(c);\n            c = src.charCodeAt(curIndex++);\n          }\n          curIndex--;\n        }\n        let tk = lexemeToToken[lexeme];\n        if (tk === void 0) {\n          tk = TK_VAR;   // e.g. \\\\theta\n        } else if (tk === TK_OPERATORNAME) {\n          c = src.charCodeAt(curIndex++);\n          // Skip whitespace before '{'\n          while (c && c !== CC_LEFTBRACE) {\n            c = src.charCodeAt(curIndex++);\n          }\n          lexeme = \"\";\n          c = src.charCodeAt(curIndex++);\n          while (c && c !== CC_RIGHTBRACE) {\n            let ch = String.fromCharCode(c);\n            if (ch === \"&\" && Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(src.substring(curIndex), \"nbsp;\") === 0) {\n              // Skip &nbsp;\n              curIndex += 5;\n            } else if (ch === \" \" || ch === \"\\t\") {\n              // Skip space and tab\n            } else {\n              lexeme += ch;\n            }\n            c = src.charCodeAt(curIndex++);\n          }\n          tk = lexemeToToken[\"\\\\\" + lexeme];\n          if (tk === void 0) {\n            tk = TK_OPERATORNAME;\n          }\n        } else if (tk === TK_TEXT || tk === TK_TYPE) {\n          c = src.charCodeAt(curIndex++);\n          // Skip whitespace before '{'\n          while (c && c !== CC_LEFTBRACE) {\n            c = src.charCodeAt(curIndex++);\n          }\n          lexeme = \"\";\n          c = src.charCodeAt(curIndex++);\n          let keepTextWhitespace = Model.option(options, \"keepTextWhitespace\");\n          while (c && c !== CC_RIGHTBRACE) {\n            let ch = String.fromCharCode(c);\n            if (!keepTextWhitespace && ch === \"&\" && Object(_backward_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOf\"])(src.substring(curIndex), \"nbsp;\") === 0) {\n              // Skip &nbsp;\n              curIndex += 5;\n            } else if (!keepTextWhitespace && (ch === \" \" || ch === \"\\t\")) {\n              // Skip space and tab\n            } else {\n              lexeme += ch;\n            }\n            c = src.charCodeAt(curIndex++);\n          }\n          if (tk !== TK_TYPE) {\n            // Not a type, so convert to a var.\n            if (!lexeme || Model.option(options, \"ignoreText\")) {\n              tk = null;   // Treat as whitespace.\n            } else {\n              tk = TK_VAR; // Treat as variable.\n            }\n          }\n        }\n        return tk;\n      }\n      function prime(c) {\n        Object(_assert_js__WEBPACK_IMPORTED_MODULE_1__[\"assert\"])(c === 39);\n        lexeme = \"'\";\n        while (src.charCodeAt(curIndex) === 39) {\n          curIndex++;\n          lexeme += \"'\";\n        }\n        return TK_VAR;\n      }\n      // Return a scanner object.\n      return {\n        start: start,\n        lexeme: function () {\n          return lexeme;\n        },\n        pos: function() { return curIndex; }\n      };\n    }\n  };\n  return Model;\n})();\n\n\n//# sourceURL=webpack://MathCore/./src/model.js?");

/***/ })

/******/ });
});